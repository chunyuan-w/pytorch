size:  [16384, 128]
[DEBUG tensorexpr_fuser.cpp:252] Before removeProfileNodesAndSpecializeTypes:
[DEBUG tensorexpr_fuser.cpp:252] graph(%self : __torch__.___torch_mangle_1.M,
[DEBUG tensorexpr_fuser.cpp:252]       %x : Tensor):
[DEBUG tensorexpr_fuser.cpp:252]   %3 : int = prim::Constant[value=-1]() # test/test_te_softmax.py:91:0
[DEBUG tensorexpr_fuser.cpp:252]   %2 : NoneType = prim::Constant()
[DEBUG tensorexpr_fuser.cpp:252]   %4 : Tensor = prim::profile[profiled_type=Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu), seen_none=0](%x)
[DEBUG tensorexpr_fuser.cpp:252]   %5 : Tensor = aten::softmax(%4, %3, %2) # test/test_te_softmax.py:91:0
[DEBUG tensorexpr_fuser.cpp:252]   %6 : Tensor = prim::profile[profiled_type=Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu), seen_none=0](%5)
[DEBUG tensorexpr_fuser.cpp:252]   return (%6)
[DEBUG tensorexpr_fuser.cpp:190] Removing prim::profile: %4
[DEBUG tensorexpr_fuser.cpp:190] Removing prim::profile: %6
[DEBUG tensorexpr_fuser.cpp:254] After removeProfileNodesAndSpecializeTypes:
[DEBUG tensorexpr_fuser.cpp:254] graph(%self : __torch__.___torch_mangle_1.M,
[DEBUG tensorexpr_fuser.cpp:254]       %x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DEBUG tensorexpr_fuser.cpp:254]   %3 : int = prim::Constant[value=-1]() # test/test_te_softmax.py:91:0
[DEBUG tensorexpr_fuser.cpp:254]   %2 : NoneType = prim::Constant()
[DEBUG tensorexpr_fuser.cpp:254]   %5 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %3, %2) # test/test_te_softmax.py:91:0
[DEBUG tensorexpr_fuser.cpp:254]   return (%5)
[DUMP tensorexpr_fuser.cpp:1294] Before TExprFuser: 
[DUMP tensorexpr_fuser.cpp:1294] graph(%self : __torch__.___torch_mangle_1.M,
[DUMP tensorexpr_fuser.cpp:1294]       %x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP tensorexpr_fuser.cpp:1294]   %3 : int = prim::Constant[value=-1]() # test/test_te_softmax.py:91:0
[DUMP tensorexpr_fuser.cpp:1294]   %2 : NoneType = prim::Constant()
[DUMP tensorexpr_fuser.cpp:1294]   %5 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %3, %2) # test/test_te_softmax.py:91:0
[DUMP tensorexpr_fuser.cpp:1294]   return (%5)
[DUMP tensorexpr_fuser.cpp:551] After removing redundant profile nodes: 
[DUMP tensorexpr_fuser.cpp:551] graph(%self : __torch__.___torch_mangle_1.M,
[DUMP tensorexpr_fuser.cpp:551]       %x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP tensorexpr_fuser.cpp:551]   %3 : int = prim::Constant[value=-1]() # test/test_te_softmax.py:91:0
[DUMP tensorexpr_fuser.cpp:551]   %2 : NoneType = prim::Constant()
[DUMP tensorexpr_fuser.cpp:551]   %5 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %3, %2) # test/test_te_softmax.py:91:0
[DUMP tensorexpr_fuser.cpp:551]   return (%5)
[DEBUG tensorexpr_fuser.cpp:646] Considering node:%5 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %3, %2) # test/test_te_softmax.py:91:0
[UPDATE tensorexpr_fuser.cpp:575] Creating a tensorexpr::Group node from: %5 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %3, %2) # test/test_te_softmax.py:91:0
[DEBUG tensorexpr_fuser.cpp:606] Iteratively pull input nodes into the fusion group...
[DEBUG tensorexpr_fuser.cpp:625] Current fusion group: %8 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = prim::TensorExprGroup[Subgraph=<Graph>](%x)
[DEBUG tensorexpr_fuser.cpp:628] graph(%x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DEBUG tensorexpr_fuser.cpp:628]   %1 : int = prim::Constant[value=-1]()
[DEBUG tensorexpr_fuser.cpp:628]   %2 : NoneType = prim::Constant()
[DEBUG tensorexpr_fuser.cpp:628]   %3 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %1, %2) # test/test_te_softmax.py:91:0
[DEBUG tensorexpr_fuser.cpp:628]   return (%3)
[DEBUG tensorexpr_fuser.cpp:611] Trying to merge: %self : __torch__.___torch_mangle_1.M, %x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = prim::Param()
[DEBUG tensorexpr_fuser.cpp:1094] Failed cond tensorexpr::pickDeviceType(node->inputs())
[DEBUG tensorexpr_fuser.cpp:1127] Failed cond canHandle(producer) || producer->kind() == prim::TensorExprGroup
[DEBUG tensorexpr_fuser.cpp:646] Considering node:%2 : NoneType = prim::Constant()
[DEBUG tensorexpr_fuser.cpp:1094] Failed cond tensorexpr::pickDeviceType(node->inputs())
[DEBUG tensorexpr_fuser.cpp:646] Considering node:%3 : int = prim::Constant[value=-1]() # test/test_te_softmax.py:91:0
[DEBUG tensorexpr_fuser.cpp:1094] Failed cond tensorexpr::pickDeviceType(node->inputs())
[DUMP tensorexpr_fuser.cpp:553] After creating fusion groups: 
[DUMP tensorexpr_fuser.cpp:553] graph(%self : __torch__.___torch_mangle_1.M,
[DUMP tensorexpr_fuser.cpp:553]       %x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP tensorexpr_fuser.cpp:553]   %3 : int = prim::Constant[value=-1]() # test/test_te_softmax.py:91:0
[DUMP tensorexpr_fuser.cpp:553]   %2 : NoneType = prim::Constant()
[DUMP tensorexpr_fuser.cpp:553]   %8 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = prim::TensorExprGroup_0(%x)
[DUMP tensorexpr_fuser.cpp:553]   return (%8)
[DUMP tensorexpr_fuser.cpp:553] with prim::TensorExprGroup_0 = graph(%x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP tensorexpr_fuser.cpp:553]   %1 : int = prim::Constant[value=-1]()
[DUMP tensorexpr_fuser.cpp:553]   %2 : NoneType = prim::Constant()
[DUMP tensorexpr_fuser.cpp:553]   %3 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %1, %2) # test/test_te_softmax.py:91:0
[DUMP tensorexpr_fuser.cpp:553]   return (%3)
[DEBUG tensorexpr_fuser.cpp:763] 
[DEBUG tensorexpr_fuser.cpp:763] <GRAPH_EXPORT>
[DEBUG tensorexpr_fuser.cpp:763] graph(%x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DEBUG tensorexpr_fuser.cpp:763]   %2 : NoneType = prim::Constant()
[DEBUG tensorexpr_fuser.cpp:763]   %1 : int = prim::Constant[value=-1]()
[DEBUG tensorexpr_fuser.cpp:763]   %3 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %1, %2) # test/test_te_softmax.py:91:0
[DEBUG tensorexpr_fuser.cpp:763]   return (%3)
[DEBUG tensorexpr_fuser.cpp:763] </GRAPH_EXPORT>
[DUMP tensorexpr_fuser.cpp:558] After inlining small fusion groups: 
[DUMP tensorexpr_fuser.cpp:558] graph(%self : __torch__.___torch_mangle_1.M,
[DUMP tensorexpr_fuser.cpp:558]       %x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP tensorexpr_fuser.cpp:558]   %3 : int = prim::Constant[value=-1]() # test/test_te_softmax.py:91:0
[DUMP tensorexpr_fuser.cpp:558]   %2 : NoneType = prim::Constant()
[DUMP tensorexpr_fuser.cpp:558]   %8 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = prim::TensorExprGroup_0(%x)
[DUMP tensorexpr_fuser.cpp:558]   return (%8)
[DUMP tensorexpr_fuser.cpp:558] with prim::TensorExprGroup_0 = graph(%x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP tensorexpr_fuser.cpp:558]   %2 : NoneType = prim::Constant()
[DUMP tensorexpr_fuser.cpp:558]   %1 : int = prim::Constant[value=-1]()
[DUMP tensorexpr_fuser.cpp:558]   %3 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %1, %2) # test/test_te_softmax.py:91:0
[DUMP tensorexpr_fuser.cpp:558]   return (%3)
[DUMP tensorexpr_fuser.cpp:429] buildShapeExpressions for 
[DUMP tensorexpr_fuser.cpp:429] graph(%x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP tensorexpr_fuser.cpp:429]   %2 : NoneType = prim::Constant()
[DUMP tensorexpr_fuser.cpp:429]   %1 : int = prim::Constant[value=-1]()
[DUMP tensorexpr_fuser.cpp:429]   %3 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %1, %2) # test/test_te_softmax.py:91:0
[DUMP tensorexpr_fuser.cpp:429]   return (%3)
[DEBUG tensorexpr_fuser.cpp:443] Adding a mapping for %x %9 : int[] = aten::size(%x)
[DEBUG tensorexpr_fuser.cpp:303] Inserting a typecheck guard for a node%8 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = prim::TensorExprGroup[Subgraph=<Graph>](%x)
[DUMP tensorexpr_fuser.cpp:566] After guarding fusion groups: 
[DUMP tensorexpr_fuser.cpp:566] graph(%self : __torch__.___torch_mangle_1.M,
[DUMP tensorexpr_fuser.cpp:566]       %x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP tensorexpr_fuser.cpp:566]   %3 : int = prim::Constant[value=-1]() # test/test_te_softmax.py:91:0
[DUMP tensorexpr_fuser.cpp:566]   %2 : NoneType = prim::Constant()
[DUMP tensorexpr_fuser.cpp:566]   %11 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu), %12 : bool = prim::TypeCheck[types=[Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)]](%x)
[DUMP tensorexpr_fuser.cpp:566]   %13 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = prim::If(%12)
[DUMP tensorexpr_fuser.cpp:566]     block0():
[DUMP tensorexpr_fuser.cpp:566]       %8 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = prim::TensorExprGroup_0(%11)
[DUMP tensorexpr_fuser.cpp:566]       -> (%8)
[DUMP tensorexpr_fuser.cpp:566]     block1():
[DUMP tensorexpr_fuser.cpp:566]       %17 : Tensor = prim::FallbackGraph_1(%x)
[DUMP tensorexpr_fuser.cpp:566]       -> (%17)
[DUMP tensorexpr_fuser.cpp:566]   %9 : int[] = aten::size(%x)
[DUMP tensorexpr_fuser.cpp:566]   %10 : int[] = aten::size(%13)
[DUMP tensorexpr_fuser.cpp:566]   return (%13)
[DUMP tensorexpr_fuser.cpp:566] with prim::TensorExprGroup_0 = graph(%x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP tensorexpr_fuser.cpp:566]   %2 : NoneType = prim::Constant()
[DUMP tensorexpr_fuser.cpp:566]   %1 : int = prim::Constant[value=-1]()
[DUMP tensorexpr_fuser.cpp:566]   %3 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %1, %2) # test/test_te_softmax.py:91:0
[DUMP tensorexpr_fuser.cpp:566]   return (%3)
[DUMP tensorexpr_fuser.cpp:566] with prim::FallbackGraph_1 = graph(%x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP tensorexpr_fuser.cpp:566]   %1 : NoneType = prim::Constant()
[DUMP tensorexpr_fuser.cpp:566]   %2 : int = prim::Constant[value=-1]()
[DUMP tensorexpr_fuser.cpp:566]   %3 : Tensor = aten::softmax(%x, %2, %1) # test/test_te_softmax.py:91:0
[DUMP tensorexpr_fuser.cpp:566]   return (%3)
[DUMP tensorexpr_fuser.cpp:1316] After TExprFuser: 
[DUMP tensorexpr_fuser.cpp:1316] graph(%self : __torch__.___torch_mangle_1.M,
[DUMP tensorexpr_fuser.cpp:1316]       %x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP tensorexpr_fuser.cpp:1316]   %11 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu), %12 : bool = prim::TypeCheck[types=[Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)]](%x)
[DUMP tensorexpr_fuser.cpp:1316]   %13 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = prim::If(%12)
[DUMP tensorexpr_fuser.cpp:1316]     block0():
[DUMP tensorexpr_fuser.cpp:1316]       %8 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = prim::TensorExprGroup_0(%11)
[DUMP tensorexpr_fuser.cpp:1316]       -> (%8)
[DUMP tensorexpr_fuser.cpp:1316]     block1():
[DUMP tensorexpr_fuser.cpp:1316]       %17 : Tensor = prim::FallbackGraph_1(%x)
[DUMP tensorexpr_fuser.cpp:1316]       -> (%17)
[DUMP tensorexpr_fuser.cpp:1316]   return (%13)
[DUMP tensorexpr_fuser.cpp:1316] with prim::TensorExprGroup_0 = graph(%x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP tensorexpr_fuser.cpp:1316]   %2 : NoneType = prim::Constant()
[DUMP tensorexpr_fuser.cpp:1316]   %1 : int = prim::Constant[value=-1]()
[DUMP tensorexpr_fuser.cpp:1316]   %3 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %1, %2) # test/test_te_softmax.py:91:0
[DUMP tensorexpr_fuser.cpp:1316]   return (%3)
[DUMP tensorexpr_fuser.cpp:1316] with prim::FallbackGraph_1 = graph(%x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP tensorexpr_fuser.cpp:1316]   %1 : NoneType = prim::Constant()
[DUMP tensorexpr_fuser.cpp:1316]   %2 : int = prim::Constant[value=-1]()
[DUMP tensorexpr_fuser.cpp:1316]   %3 : Tensor = aten::softmax(%x, %2, %1) # test/test_te_softmax.py:91:0
[DUMP tensorexpr_fuser.cpp:1316]   return (%3)
[DUMP kernel.cpp:1560] TensorExprKernel graph (Before graph optimization):
[DUMP kernel.cpp:1560] graph(%x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP kernel.cpp:1560]   %1 : NoneType = prim::Constant()
[DUMP kernel.cpp:1560]   %2 : int = prim::Constant[value=-1]()
[DUMP kernel.cpp:1560]   %3 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %2, %1) # test/test_te_softmax.py:91:0
[DUMP kernel.cpp:1560]   return (%3)
[DUMP kernel.cpp:1588] TensorExprKernel graph (After graph optimization):
[DUMP kernel.cpp:1588] graph(%x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP kernel.cpp:1588]   %1 : NoneType = prim::Constant()
[DUMP kernel.cpp:1588]   %2 : int = prim::Constant[value=-1]()
[DUMP kernel.cpp:1588]   %3 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %2, %1) # test/test_te_softmax.py:91:0
[DUMP kernel.cpp:1588]   return (%3)
[DUMP kernel.cpp:1592] TensorExprKernel graph:
[DUMP kernel.cpp:1592] graph(%x : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu)):
[DUMP kernel.cpp:1592]   %1 : NoneType = prim::Constant()
[DUMP kernel.cpp:1592]   %2 : int = prim::Constant[value=-1]()
[DUMP kernel.cpp:1592]   %3 : Float(16384, 128, strides=[128, 1], requires_grad=0, device=cpu) = aten::softmax(%x, %2, %1) # test/test_te_softmax.py:91:0
[DUMP kernel.cpp:1592]   return (%3)
[DEBUG softmax.cpp:029] after splitWithMask{
[DEBUG softmax.cpp:029]   for (int64_t i = 0ll; i < 16384ll; i++) {
[DEBUG softmax.cpp:029]     aten_softmax_max[i] = float(1.175494350822288e-38f);
[DEBUG softmax.cpp:029]     for (int64_t i_outer = 0ll; i_outer < (128ll - 0ll) / 8ll; i_outer++) {
[DEBUG softmax.cpp:029]       for (int64_t i_inner = 0ll; i_inner < 8ll; i_inner++) {
[DEBUG softmax.cpp:029]         aten_softmax_max[i] = ReduceOp(Max(aten_softmax_max[i], tx[i, i_outer * 8ll + i_inner], 1), reduce_args={i_inner, i_outer});
[DEBUG softmax.cpp:029]       }
[DEBUG softmax.cpp:029]     }
[DEBUG softmax.cpp:029]   }
[DEBUG softmax.cpp:029] }
[DEBUG softmax.cpp:034] after 1st reorderAxis{
[DEBUG softmax.cpp:034]   for (int64_t i = 0ll; i < 16384ll; i++) {
[DEBUG softmax.cpp:034]     aten_softmax_max[i] = float(1.175494350822288e-38f);
[DEBUG softmax.cpp:034]     for (int64_t i_inner = 0ll; i_inner < 8ll; i_inner++) {
[DEBUG softmax.cpp:034]       for (int64_t i_outer = 0ll; i_outer < (128ll - 0ll) / 8ll; i_outer++) {
[DEBUG softmax.cpp:034]         aten_softmax_max[i] = ReduceOp(Max(aten_softmax_max[i], tx[i, i_outer * 8ll + i_inner], 1), reduce_args={i_inner, i_outer});
[DEBUG softmax.cpp:034]       }
[DEBUG softmax.cpp:034]     }
[DEBUG softmax.cpp:034]   }
[DEBUG softmax.cpp:034] }
[DEBUG softmax.cpp:066] after 1st rfactor{
[DEBUG softmax.cpp:066]   for (int64_t i = 0ll; i < 16384ll; i++) {
[DEBUG softmax.cpp:066]     aten_softmax_max[i] = float(1.175494350822288e-38f);
[DEBUG softmax.cpp:066]     for (int64_t i_inner = 0ll; i_inner < 8ll; i_inner++) {
[DEBUG softmax.cpp:066]       aten_softmax_max_rfac[i, i_inner] = float(1.175494350822288e-38f);
[DEBUG softmax.cpp:066]       for (int64_t i_outer = 0ll; i_outer < (128ll - 0ll) / 8ll; i_outer++) {
[DEBUG softmax.cpp:066]         aten_softmax_max_rfac[i, i_inner] = ReduceOp(Max(aten_softmax_max_rfac[i, i_inner], tx[i, i_outer * 8ll + i_inner], 1), reduce_args={i_outer});
[DEBUG softmax.cpp:066]       }
[DEBUG softmax.cpp:066]       aten_softmax_max[i] = ReduceOp(Max(aten_softmax_max[i], aten_softmax_max_rfac[i, i_inner], 1), reduce_args={i_inner});
[DEBUG softmax.cpp:066]     }
[DEBUG softmax.cpp:066]   }
[DEBUG softmax.cpp:066] }
[DEBUG softmax.cpp:069] after 2nd reorderAxis{
[DEBUG softmax.cpp:069]   for (int64_t i = 0ll; i < 16384ll; i++) {
[DEBUG softmax.cpp:069]     aten_softmax_max[i] = float(1.175494350822288e-38f);
[DEBUG softmax.cpp:069]     for (int64_t i_inner = 0ll; i_inner < 8ll; i_inner++) {
[DEBUG softmax.cpp:069]       aten_softmax_max_rfac[i, i_inner] = float(1.175494350822288e-38f);
[DEBUG softmax.cpp:069]     }
[DEBUG softmax.cpp:069]     for (int64_t i_outer = 0ll; i_outer < (128ll - 0ll) / 8ll; i_outer++) {
[DEBUG softmax.cpp:069]       for (int64_t i_inner = 0ll; i_inner < 8ll; i_inner++) {
[DEBUG softmax.cpp:069]         aten_softmax_max_rfac[i, i_inner] = ReduceOp(Max(aten_softmax_max_rfac[i, i_inner], tx[i, i_outer * 8ll + i_inner], 1), reduce_args={i_outer});
[DEBUG softmax.cpp:069]       }
[DEBUG softmax.cpp:069]     }
[DEBUG softmax.cpp:069]     for (int64_t i_inner = 0ll; i_inner < 8ll; i_inner++) {
[DEBUG softmax.cpp:069]       aten_softmax_max[i] = ReduceOp(Max(aten_softmax_max[i], aten_softmax_max_rfac[i, i_inner], 1), reduce_args={i_inner});
[DEBUG softmax.cpp:069]     }
[DEBUG softmax.cpp:069]   }
[DEBUG softmax.cpp:069] }
[DEBUG softmax.cpp:224] after splitWithMask{
[DEBUG softmax.cpp:224]   for (int64_t i = 0ll; i < 16384ll; i++) {
[DEBUG softmax.cpp:224]     aten_softmax_sum[i] = float(0);
[DEBUG softmax.cpp:224]     for (int64_t i_outer = 0ll; i_outer < (128ll - 0ll) / 8ll; i_outer++) {
[DEBUG softmax.cpp:224]       for (int64_t i_inner = 0ll; i_inner < 8ll; i_inner++) {
[DEBUG softmax.cpp:224]         aten_softmax_sum[i] = ReduceOp((aten_softmax_sum[i]) + (aten_softmax_exp[i, i_outer * 8ll + i_inner]), reduce_args={i_inner, i_outer});
[DEBUG softmax.cpp:224]       }
[DEBUG softmax.cpp:224]     }
[DEBUG softmax.cpp:224]   }
[DEBUG softmax.cpp:224] }
[DEBUG softmax.cpp:229] after 1st reorderAxis{
[DEBUG softmax.cpp:229]   for (int64_t i = 0ll; i < 16384ll; i++) {
[DEBUG softmax.cpp:229]     aten_softmax_sum[i] = float(0);
[DEBUG softmax.cpp:229]     for (int64_t i_inner = 0ll; i_inner < 8ll; i_inner++) {
[DEBUG softmax.cpp:229]       for (int64_t i_outer = 0ll; i_outer < (128ll - 0ll) / 8ll; i_outer++) {
[DEBUG softmax.cpp:229]         aten_softmax_sum[i] = ReduceOp((aten_softmax_sum[i]) + (aten_softmax_exp[i, i_outer * 8ll + i_inner]), reduce_args={i_inner, i_outer});
[DEBUG softmax.cpp:229]       }
[DEBUG softmax.cpp:229]     }
[DEBUG softmax.cpp:229]   }
[DEBUG softmax.cpp:229] }
[DEBUG softmax.cpp:261] after 1st rfactor{
[DEBUG softmax.cpp:261]   for (int64_t i = 0ll; i < 16384ll; i++) {
[DEBUG softmax.cpp:261]     aten_softmax_sum[i] = float(0);
[DEBUG softmax.cpp:261]     for (int64_t i_inner = 0ll; i_inner < 8ll; i_inner++) {
[DEBUG softmax.cpp:261]       aten_softmax_sum_rfac[i, i_inner] = float(0);
[DEBUG softmax.cpp:261]       for (int64_t i_outer = 0ll; i_outer < (128ll - 0ll) / 8ll; i_outer++) {
[DEBUG softmax.cpp:261]         aten_softmax_sum_rfac[i, i_inner] = ReduceOp((aten_softmax_sum_rfac[i, i_inner]) + (aten_softmax_exp[i, i_outer * 8ll + i_inner]), reduce_args={i_outer});
[DEBUG softmax.cpp:261]       }
[DEBUG softmax.cpp:261]       aten_softmax_sum[i] = ReduceOp((aten_softmax_sum[i]) + (aten_softmax_sum_rfac[i, i_inner]), reduce_args={i_inner});
[DEBUG softmax.cpp:261]     }
[DEBUG softmax.cpp:261]   }
[DEBUG softmax.cpp:261] }
[DEBUG softmax.cpp:264] after 2nd reorderAxis{
[DEBUG softmax.cpp:264]   for (int64_t i = 0ll; i < 16384ll; i++) {
[DEBUG softmax.cpp:264]     aten_softmax_sum[i] = float(0);
[DEBUG softmax.cpp:264]     for (int64_t i_inner = 0ll; i_inner < 8ll; i_inner++) {
[DEBUG softmax.cpp:264]       aten_softmax_sum_rfac[i, i_inner] = float(0);
[DEBUG softmax.cpp:264]     }
[DEBUG softmax.cpp:264]     for (int64_t i_outer = 0ll; i_outer < (128ll - 0ll) / 8ll; i_outer++) {
[DEBUG softmax.cpp:264]       for (int64_t i_inner = 0ll; i_inner < 8ll; i_inner++) {
[DEBUG softmax.cpp:264]         aten_softmax_sum_rfac[i, i_inner] = ReduceOp((aten_softmax_sum_rfac[i, i_inner]) + (aten_softmax_exp[i, i_outer * 8ll + i_inner]), reduce_args={i_outer});
[DEBUG softmax.cpp:264]       }
[DEBUG softmax.cpp:264]     }
[DEBUG softmax.cpp:264]     for (int64_t i_inner = 0ll; i_inner < 8ll; i_inner++) {
[DEBUG softmax.cpp:264]       aten_softmax_sum[i] = ReduceOp((aten_softmax_sum[i]) + (aten_softmax_sum_rfac[i, i_inner]), reduce_args={i_inner});
[DEBUG softmax.cpp:264]     }
[DEBUG softmax.cpp:264]   }
[DEBUG softmax.cpp:264] }
[DEBUG kernel.cpp:698] Original Stmt:
[DEBUG kernel.cpp:698] {
[DEBUG kernel.cpp:698]   {
[DEBUG kernel.cpp:698]     {
[DEBUG kernel.cpp:698]       for (int64_t i = 0ll; i < 16384ll; i++) {
[DEBUG kernel.cpp:698]         aten_softmax_max[i] = float(1.175494350822288e-38f);
[DEBUG kernel.cpp:698]         for (int64_t j = 0ll; j < 8ll; j++) {
[DEBUG kernel.cpp:698]           aten_softmax_max_rfac[i, j] = float(1.175494350822288e-38f);
[DEBUG kernel.cpp:698]         }
[DEBUG kernel.cpp:698]         for (int64_t j_1 = 0ll; j_1 < (128ll - 0ll) / 8ll; j_1++) {
[DEBUG kernel.cpp:698]           for (int64_t k = 0ll; k < 8ll; k++) {
[DEBUG kernel.cpp:698]             aten_softmax_max_rfac[i, k] = ReduceOp(Max(aten_softmax_max_rfac[i, k], tx[i, j_1 * 8ll + k], 1), reduce_args={j_1});
[DEBUG kernel.cpp:698]           }
[DEBUG kernel.cpp:698]         }
[DEBUG kernel.cpp:698]         for (int64_t j_2 = 0ll; j_2 < 8ll; j_2++) {
[DEBUG kernel.cpp:698]           aten_softmax_max[i] = ReduceOp(Max(aten_softmax_max[i], aten_softmax_max_rfac[i, j_2], 1), reduce_args={j_2});
[DEBUG kernel.cpp:698]         }
[DEBUG kernel.cpp:698]       }
[DEBUG kernel.cpp:698]     }
[DEBUG kernel.cpp:698]     for (int64_t i_1 = 0ll; i_1 < 16384ll; i_1++) {
[DEBUG kernel.cpp:698]       for (int64_t j_3 = 0ll; j_3 < 128ll; j_3++) {
[DEBUG kernel.cpp:698]         aten_softmax_exp[i_1, j_3] = exp((tx[i_1, j_3]) - (aten_softmax_max[i_1]));
[DEBUG kernel.cpp:698]       }
[DEBUG kernel.cpp:698]     }
[DEBUG kernel.cpp:698]     {
[DEBUG kernel.cpp:698]       for (int64_t i_2 = 0ll; i_2 < 16384ll; i_2++) {
[DEBUG kernel.cpp:698]         aten_softmax_sum[i_2] = float(0);
[DEBUG kernel.cpp:698]         for (int64_t j_4 = 0ll; j_4 < 8ll; j_4++) {
[DEBUG kernel.cpp:698]           aten_softmax_sum_rfac[i_2, j_4] = float(0);
[DEBUG kernel.cpp:698]         }
[DEBUG kernel.cpp:698]         for (int64_t j_5 = 0ll; j_5 < (128ll - 0ll) / 8ll; j_5++) {
[DEBUG kernel.cpp:698]           for (int64_t k_1 = 0ll; k_1 < 8ll; k_1++) {
[DEBUG kernel.cpp:698]             aten_softmax_sum_rfac[i_2, k_1] = ReduceOp((aten_softmax_sum_rfac[i_2, k_1]) + (aten_softmax_exp[i_2, j_5 * 8ll + k_1]), reduce_args={j_5});
[DEBUG kernel.cpp:698]           }
[DEBUG kernel.cpp:698]         }
[DEBUG kernel.cpp:698]         for (int64_t j_6 = 0ll; j_6 < 8ll; j_6++) {
[DEBUG kernel.cpp:698]           aten_softmax_sum[i_2] = ReduceOp((aten_softmax_sum[i_2]) + (aten_softmax_sum_rfac[i_2, j_6]), reduce_args={j_6});
[DEBUG kernel.cpp:698]         }
[DEBUG kernel.cpp:698]       }
[DEBUG kernel.cpp:698]     }
[DEBUG kernel.cpp:698]     for (int64_t i_3 = 0ll; i_3 < 16384ll; i_3++) {
[DEBUG kernel.cpp:698]       for (int64_t j_7 = 0ll; j_7 < 128ll; j_7++) {
[DEBUG kernel.cpp:698]         aten_softmax[i_3, j_7] = (aten_softmax_exp[i_3, j_7]) * (float(1) / (aten_softmax_sum[i_3]));
[DEBUG kernel.cpp:698]       }
[DEBUG kernel.cpp:698]     }
[DEBUG kernel.cpp:698]   }
[DEBUG kernel.cpp:698] }
[DEBUG kernel.cpp:720] after simplify{
[DEBUG kernel.cpp:720]   for (int64_t i = 0ll; i < 16384ll; i++) {
[DEBUG kernel.cpp:720]     aten_softmax_max[i] = 1.175494350822288e-38f;
[DEBUG kernel.cpp:720]     for (int64_t j = 0ll; j < 8ll; j++) {
[DEBUG kernel.cpp:720]       aten_softmax_max_rfac[i, j] = 1.175494350822288e-38f;
[DEBUG kernel.cpp:720]     }
[DEBUG kernel.cpp:720]     for (int64_t j_1 = 0ll; j_1 < 16ll; j_1++) {
[DEBUG kernel.cpp:720]       for (int64_t k = 0ll; k < 8ll; k++) {
[DEBUG kernel.cpp:720]         aten_softmax_max_rfac[i, k] = ReduceOp(Max(aten_softmax_max_rfac[i, k], tx[i, k + 8ll * j_1], 1), reduce_args={j_1});
[DEBUG kernel.cpp:720]       }
[DEBUG kernel.cpp:720]     }
[DEBUG kernel.cpp:720]     for (int64_t j_2 = 0ll; j_2 < 8ll; j_2++) {
[DEBUG kernel.cpp:720]       aten_softmax_max[i] = ReduceOp(Max(aten_softmax_max[i], aten_softmax_max_rfac[i, j_2], 1), reduce_args={j_2});
[DEBUG kernel.cpp:720]     }
[DEBUG kernel.cpp:720]   }
[DEBUG kernel.cpp:720]   for (int64_t i_1 = 0ll; i_1 < 16384ll; i_1++) {
[DEBUG kernel.cpp:720]     for (int64_t j_3 = 0ll; j_3 < 128ll; j_3++) {
[DEBUG kernel.cpp:720]       aten_softmax_exp[i_1, j_3] = exp((tx[i_1, j_3]) - (aten_softmax_max[i_1]));
[DEBUG kernel.cpp:720]     }
[DEBUG kernel.cpp:720]   }
[DEBUG kernel.cpp:720]   for (int64_t i_2 = 0ll; i_2 < 16384ll; i_2++) {
[DEBUG kernel.cpp:720]     aten_softmax_sum[i_2] = 0.f;
[DEBUG kernel.cpp:720]     for (int64_t j_4 = 0ll; j_4 < 8ll; j_4++) {
[DEBUG kernel.cpp:720]       aten_softmax_sum_rfac[i_2, j_4] = 0.f;
[DEBUG kernel.cpp:720]     }
[DEBUG kernel.cpp:720]     for (int64_t j_5 = 0ll; j_5 < 16ll; j_5++) {
[DEBUG kernel.cpp:720]       for (int64_t k_1 = 0ll; k_1 < 8ll; k_1++) {
[DEBUG kernel.cpp:720]         aten_softmax_sum_rfac[i_2, k_1] = ReduceOp((aten_softmax_sum_rfac[i_2, k_1]) + (aten_softmax_exp[i_2, k_1 + 8ll * j_5]), reduce_args={j_5});
[DEBUG kernel.cpp:720]       }
[DEBUG kernel.cpp:720]     }
[DEBUG kernel.cpp:720]     for (int64_t j_6 = 0ll; j_6 < 8ll; j_6++) {
[DEBUG kernel.cpp:720]       aten_softmax_sum[i_2] = ReduceOp((aten_softmax_sum[i_2]) + (aten_softmax_sum_rfac[i_2, j_6]), reduce_args={j_6});
[DEBUG kernel.cpp:720]     }
[DEBUG kernel.cpp:720]   }
[DEBUG kernel.cpp:720]   for (int64_t i_3 = 0ll; i_3 < 16384ll; i_3++) {
[DEBUG kernel.cpp:720]     for (int64_t j_7 = 0ll; j_7 < 128ll; j_7++) {
[DEBUG kernel.cpp:720]       aten_softmax[i_3, j_7] = (aten_softmax_exp[i_3, j_7]) * (1.f / (aten_softmax_sum[i_3]));
[DEBUG kernel.cpp:720]     }
[DEBUG kernel.cpp:720]   }
[DEBUG kernel.cpp:720] }
[DEBUG kernel.cpp:730] after inline{
[DEBUG kernel.cpp:730]   for (int64_t i = 0ll; i < 16384ll; i++) {
[DEBUG kernel.cpp:730]     aten_softmax_max[i] = 1.175494350822288e-38f;
[DEBUG kernel.cpp:730]     for (int64_t j = 0ll; j < 8ll; j++) {
[DEBUG kernel.cpp:730]       aten_softmax_max_rfac[i, j] = 1.175494350822288e-38f;
[DEBUG kernel.cpp:730]     }
[DEBUG kernel.cpp:730]     for (int64_t j_1 = 0ll; j_1 < 16ll; j_1++) {
[DEBUG kernel.cpp:730]       for (int64_t k = 0ll; k < 8ll; k++) {
[DEBUG kernel.cpp:730]         aten_softmax_max_rfac[i, k] = ReduceOp(Max(aten_softmax_max_rfac[i, k], tx[i, k + 8ll * j_1], 1), reduce_args={j_1});
[DEBUG kernel.cpp:730]       }
[DEBUG kernel.cpp:730]     }
[DEBUG kernel.cpp:730]     for (int64_t j_2 = 0ll; j_2 < 8ll; j_2++) {
[DEBUG kernel.cpp:730]       aten_softmax_max[i] = ReduceOp(Max(aten_softmax_max[i], aten_softmax_max_rfac[i, j_2], 1), reduce_args={j_2});
[DEBUG kernel.cpp:730]     }
[DEBUG kernel.cpp:730]   }
[DEBUG kernel.cpp:730]   for (int64_t i_2 = 0ll; i_2 < 16384ll; i_2++) {
[DEBUG kernel.cpp:730]     aten_softmax_sum[i_2] = 0.f;
[DEBUG kernel.cpp:730]     for (int64_t j_4 = 0ll; j_4 < 8ll; j_4++) {
[DEBUG kernel.cpp:730]       aten_softmax_sum_rfac[i_2, j_4] = 0.f;
[DEBUG kernel.cpp:730]     }
[DEBUG kernel.cpp:730]     for (int64_t j_5 = 0ll; j_5 < 16ll; j_5++) {
[DEBUG kernel.cpp:730]       for (int64_t k_1 = 0ll; k_1 < 8ll; k_1++) {
[DEBUG kernel.cpp:730]         aten_softmax_sum_rfac[i_2, k_1] = ReduceOp((aten_softmax_sum_rfac[i_2, k_1]) + (exp((tx[i_2, k_1 + 8ll * j_5]) - (aten_softmax_max[i_2]))), reduce_args={j_5});
[DEBUG kernel.cpp:730]       }
[DEBUG kernel.cpp:730]     }
[DEBUG kernel.cpp:730]     for (int64_t j_6 = 0ll; j_6 < 8ll; j_6++) {
[DEBUG kernel.cpp:730]       aten_softmax_sum[i_2] = ReduceOp((aten_softmax_sum[i_2]) + (aten_softmax_sum_rfac[i_2, j_6]), reduce_args={j_6});
[DEBUG kernel.cpp:730]     }
[DEBUG kernel.cpp:730]   }
[DEBUG kernel.cpp:730]   for (int64_t i_3 = 0ll; i_3 < 16384ll; i_3++) {
[DEBUG kernel.cpp:730]     for (int64_t j_7 = 0ll; j_7 < 128ll; j_7++) {
[DEBUG kernel.cpp:730]       aten_softmax[i_3, j_7] = (exp((tx[i_3, j_7]) - (aten_softmax_max[i_3]))) * (1.f / (aten_softmax_sum[i_3]));
[DEBUG kernel.cpp:730]     }
[DEBUG kernel.cpp:730]   }
[DEBUG kernel.cpp:730] }
[DEBUG kernel.cpp:746] after fuse{
[DEBUG kernel.cpp:746]   for (int64_t i = 0ll; i < 16384ll; i++) {
[DEBUG kernel.cpp:746]     aten_softmax_max[i] = 1.175494350822288e-38f;
[DEBUG kernel.cpp:746]     for (int64_t j = 0ll; j < 8ll; j++) {
[DEBUG kernel.cpp:746]       aten_softmax_max_rfac[i, j] = 1.175494350822288e-38f;
[DEBUG kernel.cpp:746]     }
[DEBUG kernel.cpp:746]     for (int64_t j_1 = 0ll; j_1 < 16ll; j_1++) {
[DEBUG kernel.cpp:746]       for (int64_t k = 0ll; k < 8ll; k++) {
[DEBUG kernel.cpp:746]         aten_softmax_max_rfac[i, k] = ReduceOp(Max(aten_softmax_max_rfac[i, k], tx[i, k + 8ll * j_1], 1), reduce_args={j_1});
[DEBUG kernel.cpp:746]       }
[DEBUG kernel.cpp:746]     }
[DEBUG kernel.cpp:746]     for (int64_t j_2 = 0ll; j_2 < 8ll; j_2++) {
[DEBUG kernel.cpp:746]       aten_softmax_max[i] = ReduceOp(Max(aten_softmax_max[i], aten_softmax_max_rfac[i, j_2], 1), reduce_args={j_2});
[DEBUG kernel.cpp:746]     }
[DEBUG kernel.cpp:746]     aten_softmax_sum[i] = 0.f;
[DEBUG kernel.cpp:746]     for (int64_t j_4 = 0ll; j_4 < 8ll; j_4++) {
[DEBUG kernel.cpp:746]       aten_softmax_sum_rfac[i, j_4] = 0.f;
[DEBUG kernel.cpp:746]     }
[DEBUG kernel.cpp:746]     for (int64_t j_5 = 0ll; j_5 < 16ll; j_5++) {
[DEBUG kernel.cpp:746]       for (int64_t k_1 = 0ll; k_1 < 8ll; k_1++) {
[DEBUG kernel.cpp:746]         aten_softmax_sum_rfac[i, k_1] = ReduceOp((aten_softmax_sum_rfac[i, k_1]) + (exp((tx[i, k_1 + 8ll * j_5]) - (aten_softmax_max[i]))), reduce_args={j_5});
[DEBUG kernel.cpp:746]       }
[DEBUG kernel.cpp:746]     }
[DEBUG kernel.cpp:746]     for (int64_t j_6 = 0ll; j_6 < 8ll; j_6++) {
[DEBUG kernel.cpp:746]       aten_softmax_sum[i] = ReduceOp((aten_softmax_sum[i]) + (aten_softmax_sum_rfac[i, j_6]), reduce_args={j_6});
[DEBUG kernel.cpp:746]     }
[DEBUG kernel.cpp:746]     for (int64_t j_7 = 0ll; j_7 < 128ll; j_7++) {
[DEBUG kernel.cpp:746]       aten_softmax[i, j_7] = (exp((tx[i, j_7]) - (aten_softmax_max[i]))) * (1.f / (aten_softmax_sum[i]));
[DEBUG kernel.cpp:746]     }
[DEBUG kernel.cpp:746]   }
[DEBUG kernel.cpp:746] }
[DEBUG kernel.cpp:748] after parallelize{
[DEBUG kernel.cpp:748]   for (int64_t i = 0ll; i < 16384ll; i++)  /* parallel */{
[DEBUG kernel.cpp:748]     aten_softmax_max[i] = 1.175494350822288e-38f;
[DEBUG kernel.cpp:748]     for (int64_t j = 0ll; j < 8ll; j++) {
[DEBUG kernel.cpp:748]       aten_softmax_max_rfac[i, j] = 1.175494350822288e-38f;
[DEBUG kernel.cpp:748]     }
[DEBUG kernel.cpp:748]     for (int64_t j_1 = 0ll; j_1 < 16ll; j_1++) {
[DEBUG kernel.cpp:748]       for (int64_t k = 0ll; k < 8ll; k++) {
[DEBUG kernel.cpp:748]         aten_softmax_max_rfac[i, k] = ReduceOp(Max(aten_softmax_max_rfac[i, k], tx[i, k + 8ll * j_1], 1), reduce_args={j_1});
[DEBUG kernel.cpp:748]       }
[DEBUG kernel.cpp:748]     }
[DEBUG kernel.cpp:748]     for (int64_t j_2 = 0ll; j_2 < 8ll; j_2++) {
[DEBUG kernel.cpp:748]       aten_softmax_max[i] = ReduceOp(Max(aten_softmax_max[i], aten_softmax_max_rfac[i, j_2], 1), reduce_args={j_2});
[DEBUG kernel.cpp:748]     }
[DEBUG kernel.cpp:748]     aten_softmax_sum[i] = 0.f;
[DEBUG kernel.cpp:748]     for (int64_t j_4 = 0ll; j_4 < 8ll; j_4++) {
[DEBUG kernel.cpp:748]       aten_softmax_sum_rfac[i, j_4] = 0.f;
[DEBUG kernel.cpp:748]     }
[DEBUG kernel.cpp:748]     for (int64_t j_5 = 0ll; j_5 < 16ll; j_5++) {
[DEBUG kernel.cpp:748]       for (int64_t k_1 = 0ll; k_1 < 8ll; k_1++) {
[DEBUG kernel.cpp:748]         aten_softmax_sum_rfac[i, k_1] = ReduceOp((aten_softmax_sum_rfac[i, k_1]) + (exp((tx[i, k_1 + 8ll * j_5]) - (aten_softmax_max[i]))), reduce_args={j_5});
[DEBUG kernel.cpp:748]       }
[DEBUG kernel.cpp:748]     }
[DEBUG kernel.cpp:748]     for (int64_t j_6 = 0ll; j_6 < 8ll; j_6++) {
[DEBUG kernel.cpp:748]       aten_softmax_sum[i] = ReduceOp((aten_softmax_sum[i]) + (aten_softmax_sum_rfac[i, j_6]), reduce_args={j_6});
[DEBUG kernel.cpp:748]     }
[DEBUG kernel.cpp:748]     for (int64_t j_7 = 0ll; j_7 < 128ll; j_7++) {
[DEBUG kernel.cpp:748]       aten_softmax[i, j_7] = (exp((tx[i, j_7]) - (aten_softmax_max[i]))) * (1.f / (aten_softmax_sum[i]));
[DEBUG kernel.cpp:748]     }
[DEBUG kernel.cpp:748]   }
[DEBUG kernel.cpp:748] }
[DEBUG kernel.cpp:833] after vectorization{
[DEBUG kernel.cpp:833]   for (int64_t i = 0ll; i < 16384ll; i++)  /* parallel */{
[DEBUG kernel.cpp:833]     aten_softmax_max[i] = 1.175494350822288e-38f;
[DEBUG kernel.cpp:833]     for (int64_t j_outer = 0ll; j_outer < (8ll - 0ll) / 8ll; j_outer++) {
[DEBUG kernel.cpp:833]       {
[DEBUG kernel.cpp:833]         aten_softmax_max_rfac[Ramp(8ll * (i + j_outer), 1ll, 8)] = Broadcast(1.175494350822288e-38f, 8);
[DEBUG kernel.cpp:833]       }
[DEBUG kernel.cpp:833]     }
[DEBUG kernel.cpp:833]     for (int64_t j_1 = 0ll; j_1 < 16ll; j_1++) {
[DEBUG kernel.cpp:833]       for (int64_t k_outer = 0ll; k_outer < (8ll - 0ll) / 8ll; k_outer++) {
[DEBUG kernel.cpp:833]         {
[DEBUG kernel.cpp:833]           aten_softmax_max_rfac[Ramp(8ll * (i + k_outer), 1ll, 8)] = ReduceOp(Max(aten_softmax_max_rfac[Ramp(8ll * (i + k_outer), 1ll, 8)], tx[Ramp(8ll * ((16ll * i + j_1) + k_outer), 1ll, 8)], 1), reduce_args={j_1});
[DEBUG kernel.cpp:833]         }
[DEBUG kernel.cpp:833]       }
[DEBUG kernel.cpp:833]     }
[DEBUG kernel.cpp:833]     for (int64_t j_2_outer = 0ll; j_2_outer < (8ll - 0ll) / 8ll; j_2_outer++) {
[DEBUG kernel.cpp:833]       for (int64_t j_2_inner = 0ll; j_2_inner < 8ll; j_2_inner++) {
[DEBUG kernel.cpp:833]         aten_softmax_max[i] = ReduceOp(Max(aten_softmax_max[i], aten_softmax_max_rfac[i, j_2_outer * 8ll + j_2_inner], 1), reduce_args={j_2_inner, j_2_outer});
[DEBUG kernel.cpp:833]       }
[DEBUG kernel.cpp:833]     }
[DEBUG kernel.cpp:833]     aten_softmax_sum[i] = 0.f;
[DEBUG kernel.cpp:833]     for (int64_t j_4_outer = 0ll; j_4_outer < (8ll - 0ll) / 8ll; j_4_outer++) {
[DEBUG kernel.cpp:833]       {
[DEBUG kernel.cpp:833]         aten_softmax_sum_rfac[Ramp(8ll * (i + j_4_outer), 1ll, 8)] = Broadcast(0.f, 8);
[DEBUG kernel.cpp:833]       }
[DEBUG kernel.cpp:833]     }
[DEBUG kernel.cpp:833]     for (int64_t j_5 = 0ll; j_5 < 16ll; j_5++) {
[DEBUG kernel.cpp:833]       for (int64_t k_1_outer = 0ll; k_1_outer < (8ll - 0ll) / 8ll; k_1_outer++) {
[DEBUG kernel.cpp:833]         {
[DEBUG kernel.cpp:833]           aten_softmax_sum_rfac[Ramp(8ll * (i + k_1_outer), 1ll, 8)] = ReduceOp((aten_softmax_sum_rfac[Ramp(8ll * (i + k_1_outer), 1ll, 8)]) + (exp((tx[Ramp(8ll * ((16ll * i + j_5) + k_1_outer), 1ll, 8)]) - (Broadcast(aten_softmax_max[i], 8)))), reduce_args={j_5});
[DEBUG kernel.cpp:833]         }
[DEBUG kernel.cpp:833]       }
[DEBUG kernel.cpp:833]     }
[DEBUG kernel.cpp:833]     for (int64_t j_6_outer = 0ll; j_6_outer < (8ll - 0ll) / 8ll; j_6_outer++) {
[DEBUG kernel.cpp:833]       for (int64_t j_6_inner = 0ll; j_6_inner < 8ll; j_6_inner++) {
[DEBUG kernel.cpp:833]         aten_softmax_sum[i] = ReduceOp((aten_softmax_sum[i]) + (aten_softmax_sum_rfac[i, j_6_outer * 8ll + j_6_inner]), reduce_args={j_6_inner, j_6_outer});
[DEBUG kernel.cpp:833]       }
[DEBUG kernel.cpp:833]     }
[DEBUG kernel.cpp:833]     for (int64_t j_7_outer = 0ll; j_7_outer < (128ll - 0ll) / 8ll; j_7_outer++) {
[DEBUG kernel.cpp:833]       {
[DEBUG kernel.cpp:833]         aten_softmax[Ramp(8ll * (16ll * i + j_7_outer), 1ll, 8)] = (exp((tx[Ramp(8ll * (16ll * i + j_7_outer), 1ll, 8)]) - (Broadcast(aten_softmax_max[i], 8)))) * (Broadcast(1.f / (aten_softmax_sum[i]), 8));
[DEBUG kernel.cpp:833]       }
[DEBUG kernel.cpp:833]     }
[DEBUG kernel.cpp:833]   }
[DEBUG kernel.cpp:833] }
[DEBUG kernel.cpp:838] after prepareForCodegen{
[DEBUG kernel.cpp:838]   for (int64_t i = 0ll; i < 16384ll; i++)  /* parallel */{
[DEBUG kernel.cpp:838]     aten_softmax_max[i] = 1.175494350822288e-38f;
[DEBUG kernel.cpp:838]     for (int64_t j_outer = 0ll; j_outer < (8ll - 0ll) / 8ll; j_outer++) {
[DEBUG kernel.cpp:838]       {
[DEBUG kernel.cpp:838]         aten_softmax_max_rfac[Ramp(8ll * (i + j_outer), 1ll, 8)] = Broadcast(1.175494350822288e-38f, 8);
[DEBUG kernel.cpp:838]       }
[DEBUG kernel.cpp:838]     }
[DEBUG kernel.cpp:838]     for (int64_t j_1 = 0ll; j_1 < 16ll; j_1++) {
[DEBUG kernel.cpp:838]       for (int64_t k_outer = 0ll; k_outer < (8ll - 0ll) / 8ll; k_outer++) {
[DEBUG kernel.cpp:838]         {
[DEBUG kernel.cpp:838]           aten_softmax_max_rfac[Ramp(8ll * (i + k_outer), 1ll, 8)] = Max(aten_softmax_max_rfac[Ramp(8ll * (i + k_outer), 1ll, 8)], tx[Ramp(8ll * ((16ll * i + j_1) + k_outer), 1ll, 8)], 1);
[DEBUG kernel.cpp:838]         }
[DEBUG kernel.cpp:838]       }
[DEBUG kernel.cpp:838]     }
[DEBUG kernel.cpp:838]     for (int64_t j_2_outer = 0ll; j_2_outer < (8ll - 0ll) / 8ll; j_2_outer++) {
[DEBUG kernel.cpp:838]       for (int64_t j_2_inner = 0ll; j_2_inner < 8ll; j_2_inner++) {
[DEBUG kernel.cpp:838]         aten_softmax_max[i] = Max(aten_softmax_max[i], aten_softmax_max_rfac[(0ll + i * (1ll * 8ll)) + (j_2_outer * 8ll + j_2_inner) * 1ll], 1);
[DEBUG kernel.cpp:838]       }
[DEBUG kernel.cpp:838]     }
[DEBUG kernel.cpp:838]     aten_softmax_sum[i] = 0.f;
[DEBUG kernel.cpp:838]     for (int64_t j_4_outer = 0ll; j_4_outer < (8ll - 0ll) / 8ll; j_4_outer++) {
[DEBUG kernel.cpp:838]       {
[DEBUG kernel.cpp:838]         aten_softmax_sum_rfac[Ramp(8ll * (i + j_4_outer), 1ll, 8)] = Broadcast(0.f, 8);
[DEBUG kernel.cpp:838]       }
[DEBUG kernel.cpp:838]     }
[DEBUG kernel.cpp:838]     for (int64_t j_5 = 0ll; j_5 < 16ll; j_5++) {
[DEBUG kernel.cpp:838]       for (int64_t k_1_outer = 0ll; k_1_outer < (8ll - 0ll) / 8ll; k_1_outer++) {
[DEBUG kernel.cpp:838]         {
[DEBUG kernel.cpp:838]           aten_softmax_sum_rfac[Ramp(8ll * (i + k_1_outer), 1ll, 8)] = (aten_softmax_sum_rfac[Ramp(8ll * (i + k_1_outer), 1ll, 8)]) + (exp((tx[Ramp(8ll * ((16ll * i + j_5) + k_1_outer), 1ll, 8)]) - (Broadcast(aten_softmax_max[i], 8))));
[DEBUG kernel.cpp:838]         }
[DEBUG kernel.cpp:838]       }
[DEBUG kernel.cpp:838]     }
[DEBUG kernel.cpp:838]     for (int64_t j_6_outer = 0ll; j_6_outer < (8ll - 0ll) / 8ll; j_6_outer++) {
[DEBUG kernel.cpp:838]       for (int64_t j_6_inner = 0ll; j_6_inner < 8ll; j_6_inner++) {
[DEBUG kernel.cpp:838]         aten_softmax_sum[i] = (aten_softmax_sum[i]) + (aten_softmax_sum_rfac[(0ll + i * (1ll * 8ll)) + (j_6_outer * 8ll + j_6_inner) * 1ll]);
[DEBUG kernel.cpp:838]       }
[DEBUG kernel.cpp:838]     }
[DEBUG kernel.cpp:838]     for (int64_t j_7_outer = 0ll; j_7_outer < (128ll - 0ll) / 8ll; j_7_outer++) {
[DEBUG kernel.cpp:838]       {
[DEBUG kernel.cpp:838]         aten_softmax[Ramp(8ll * (16ll * i + j_7_outer), 1ll, 8)] = (exp((tx[Ramp(8ll * (16ll * i + j_7_outer), 1ll, 8)]) - (Broadcast(aten_softmax_max[i], 8)))) * (Broadcast(1.f / (aten_softmax_sum[i]), 8));
[DEBUG kernel.cpp:838]       }
[DEBUG kernel.cpp:838]     }
[DEBUG kernel.cpp:838]   }
[DEBUG kernel.cpp:838] }
[DEBUG kernel.cpp:840] after simplification{
[DEBUG kernel.cpp:840]   for (int64_t i = 0ll; i < 16384ll; i++)  /* parallel */{
[DEBUG kernel.cpp:840]     aten_softmax_max[i] = 1.175494350822288e-38f;
[DEBUG kernel.cpp:840]     aten_softmax_max_rfac[Ramp(8ll * i, 1ll, 8)] = Broadcast(1.175494350822288e-38f, 8);
[DEBUG kernel.cpp:840]     for (int64_t j_1 = 0ll; j_1 < 16ll; j_1++) {
[DEBUG kernel.cpp:840]       aten_softmax_max_rfac[Ramp(8ll * i, 1ll, 8)] = Max(aten_softmax_max_rfac[Ramp(8ll * i, 1ll, 8)], tx[Ramp(8ll * (16ll * i + j_1), 1ll, 8)], 1);
[DEBUG kernel.cpp:840]     }
[DEBUG kernel.cpp:840]     for (int64_t j_2_inner = 0ll; j_2_inner < 8ll; j_2_inner++) {
[DEBUG kernel.cpp:840]       aten_softmax_max[i] = Max(aten_softmax_max[i], aten_softmax_max_rfac[j_2_inner + 8ll * i], 1);
[DEBUG kernel.cpp:840]     }
[DEBUG kernel.cpp:840]     aten_softmax_sum[i] = 0.f;
[DEBUG kernel.cpp:840]     aten_softmax_sum_rfac[Ramp(8ll * i, 1ll, 8)] = Broadcast(0.f, 8);
[DEBUG kernel.cpp:840]     for (int64_t j_5 = 0ll; j_5 < 16ll; j_5++) {
[DEBUG kernel.cpp:840]       aten_softmax_sum_rfac[Ramp(8ll * i, 1ll, 8)] = (aten_softmax_sum_rfac[Ramp(8ll * i, 1ll, 8)]) + (exp((tx[Ramp(8ll * (16ll * i + j_5), 1ll, 8)]) - (Broadcast(aten_softmax_max[i], 8))));
[DEBUG kernel.cpp:840]     }
[DEBUG kernel.cpp:840]     for (int64_t j_6_inner = 0ll; j_6_inner < 8ll; j_6_inner++) {
[DEBUG kernel.cpp:840]       aten_softmax_sum[i] = (aten_softmax_sum[i]) + (aten_softmax_sum_rfac[j_6_inner + 8ll * i]);
[DEBUG kernel.cpp:840]     }
[DEBUG kernel.cpp:840]     for (int64_t j_7_outer = 0ll; j_7_outer < 16ll; j_7_outer++) {
[DEBUG kernel.cpp:840]       aten_softmax[Ramp(8ll * (16ll * i + j_7_outer), 1ll, 8)] = (exp((tx[Ramp(8ll * (16ll * i + j_7_outer), 1ll, 8)]) - (Broadcast(aten_softmax_max[i], 8)))) * (Broadcast(1.f / (aten_softmax_sum[i]), 8));
[DEBUG kernel.cpp:840]     }
[DEBUG kernel.cpp:840]   }
[DEBUG kernel.cpp:840] }
[DEBUG kernel.cpp:847] Final Stmt:
[DEBUG kernel.cpp:847] {
[DEBUG kernel.cpp:847]   for (int64_t i = 0ll; i < 16384ll; i++)  /* parallel */{
[DEBUG kernel.cpp:847]     aten_softmax_max[i] = 1.175494350822288e-38f;
[DEBUG kernel.cpp:847]     aten_softmax_max_rfac[Ramp(8ll * i, 1ll, 8)] = Broadcast(1.175494350822288e-38f, 8);
[DEBUG kernel.cpp:847]     for (int64_t j_1 = 0ll; j_1 < 16ll; j_1++) {
[DEBUG kernel.cpp:847]       aten_softmax_max_rfac[Ramp(8ll * i, 1ll, 8)] = Max(aten_softmax_max_rfac[Ramp(8ll * i, 1ll, 8)], tx[Ramp(8ll * (16ll * i + j_1), 1ll, 8)], 1);
[DEBUG kernel.cpp:847]     }
[DEBUG kernel.cpp:847]     for (int64_t j_2_inner = 0ll; j_2_inner < 8ll; j_2_inner++) {
[DEBUG kernel.cpp:847]       aten_softmax_max[i] = Max(aten_softmax_max[i], aten_softmax_max_rfac[j_2_inner + 8ll * i], 1);
[DEBUG kernel.cpp:847]     }
[DEBUG kernel.cpp:847]     aten_softmax_sum[i] = 0.f;
[DEBUG kernel.cpp:847]     aten_softmax_sum_rfac[Ramp(8ll * i, 1ll, 8)] = Broadcast(0.f, 8);
[DEBUG kernel.cpp:847]     for (int64_t j_5 = 0ll; j_5 < 16ll; j_5++) {
[DEBUG kernel.cpp:847]       aten_softmax_sum_rfac[Ramp(8ll * i, 1ll, 8)] = (aten_softmax_sum_rfac[Ramp(8ll * i, 1ll, 8)]) + (exp((tx[Ramp(8ll * (16ll * i + j_5), 1ll, 8)]) - (Broadcast(aten_softmax_max[i], 8))));
[DEBUG kernel.cpp:847]     }
[DEBUG kernel.cpp:847]     for (int64_t j_6_inner = 0ll; j_6_inner < 8ll; j_6_inner++) {
[DEBUG kernel.cpp:847]       aten_softmax_sum[i] = (aten_softmax_sum[i]) + (aten_softmax_sum_rfac[j_6_inner + 8ll * i]);
[DEBUG kernel.cpp:847]     }
[DEBUG kernel.cpp:847]     for (int64_t j_7_outer = 0ll; j_7_outer < 16ll; j_7_outer++) {
[DEBUG kernel.cpp:847]       aten_softmax[Ramp(8ll * (16ll * i + j_7_outer), 1ll, 8)] = (exp((tx[Ramp(8ll * (16ll * i + j_7_outer), 1ll, 8)]) - (Broadcast(aten_softmax_max[i], 8)))) * (Broadcast(1.f / (aten_softmax_sum[i]), 8));
[DEBUG kernel.cpp:847]     }
[DEBUG kernel.cpp:847]   }
[DEBUG kernel.cpp:847] }
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] LLVM module before optimizations
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] ; ModuleID = 'pytorch'
[DEBUG llvm_codegen.cpp:632] source_filename = "pytorch"
[DEBUG llvm_codegen.cpp:632] target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
[DEBUG llvm_codegen.cpp:632] target triple = "x86_64-unknown-linux-gnu"
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] %0 = type { float*, float*, float*, float*, float*, float* }
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] ; Function Attrs: alwaysinline
[DEBUG llvm_codegen.cpp:632] define private i32 @pytorch(float* noalias %0, float* noalias %1) #0 {
[DEBUG llvm_codegen.cpp:632] entry:
[DEBUG llvm_codegen.cpp:632]   %malloccall = tail call i8* @malloc(i64 524288)
[DEBUG llvm_codegen.cpp:632]   %2 = bitcast i8* %malloccall to float*
[DEBUG llvm_codegen.cpp:632]   %malloccall1 = tail call i8* @malloc(i64 65536)
[DEBUG llvm_codegen.cpp:632]   %3 = bitcast i8* %malloccall1 to float*
[DEBUG llvm_codegen.cpp:632]   %malloccall2 = tail call i8* @malloc(i64 65536)
[DEBUG llvm_codegen.cpp:632]   %4 = bitcast i8* %malloccall2 to float*
[DEBUG llvm_codegen.cpp:632]   %malloccall3 = tail call i8* @malloc(i64 524288)
[DEBUG llvm_codegen.cpp:632]   %5 = bitcast i8* %malloccall3 to float*
[DEBUG llvm_codegen.cpp:632]   %6 = alloca %0, align 8
[DEBUG llvm_codegen.cpp:632]   %7 = getelementptr inbounds %0, %0* %6, i32 0, i32 0
[DEBUG llvm_codegen.cpp:632]   store float* %1, float** %7, align 8
[DEBUG llvm_codegen.cpp:632]   %8 = getelementptr inbounds %0, %0* %6, i32 0, i32 1
[DEBUG llvm_codegen.cpp:632]   store float* %5, float** %8, align 8
[DEBUG llvm_codegen.cpp:632]   %9 = getelementptr inbounds %0, %0* %6, i32 0, i32 2
[DEBUG llvm_codegen.cpp:632]   store float* %4, float** %9, align 8
[DEBUG llvm_codegen.cpp:632]   %10 = getelementptr inbounds %0, %0* %6, i32 0, i32 3
[DEBUG llvm_codegen.cpp:632]   store float* %3, float** %10, align 8
[DEBUG llvm_codegen.cpp:632]   %11 = getelementptr inbounds %0, %0* %6, i32 0, i32 4
[DEBUG llvm_codegen.cpp:632]   store float* %0, float** %11, align 8
[DEBUG llvm_codegen.cpp:632]   %12 = getelementptr inbounds %0, %0* %6, i32 0, i32 5
[DEBUG llvm_codegen.cpp:632]   store float* %2, float** %12, align 8
[DEBUG llvm_codegen.cpp:632]   %13 = bitcast %0* %6 to i8*
[DEBUG llvm_codegen.cpp:632]   call void @DispatchParallel(i8* bitcast (void (i64, i8*)* @func to i8*), i64 0, i64 16384, i8* %13)
[DEBUG llvm_codegen.cpp:632]   %14 = bitcast float* %5 to i8*
[DEBUG llvm_codegen.cpp:632]   tail call void @free(i8* %14)
[DEBUG llvm_codegen.cpp:632]   %15 = bitcast float* %4 to i8*
[DEBUG llvm_codegen.cpp:632]   tail call void @free(i8* %15)
[DEBUG llvm_codegen.cpp:632]   %16 = bitcast float* %3 to i8*
[DEBUG llvm_codegen.cpp:632]   tail call void @free(i8* %16)
[DEBUG llvm_codegen.cpp:632]   %17 = bitcast float* %2 to i8*
[DEBUG llvm_codegen.cpp:632]   tail call void @free(i8* %17)
[DEBUG llvm_codegen.cpp:632]   %18 = alloca i8*, i32 0, align 8
[DEBUG llvm_codegen.cpp:632]   call void @nnc_aten_free(i64 0, i8** %18)
[DEBUG llvm_codegen.cpp:632]   ret i32 0
[DEBUG llvm_codegen.cpp:632] }
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] define i32 @fused_softmax(i8** %0) {
[DEBUG llvm_codegen.cpp:632] wrapBB:
[DEBUG llvm_codegen.cpp:632]   %1 = getelementptr i8*, i8** %0, i32 0
[DEBUG llvm_codegen.cpp:632]   %2 = load i8*, i8** %1, align 8
[DEBUG llvm_codegen.cpp:632]   %3 = bitcast i8* %2 to float*
[DEBUG llvm_codegen.cpp:632]   %4 = getelementptr i8*, i8** %0, i32 1
[DEBUG llvm_codegen.cpp:632]   %5 = load i8*, i8** %4, align 8
[DEBUG llvm_codegen.cpp:632]   %6 = bitcast i8* %5 to float*
[DEBUG llvm_codegen.cpp:632]   %7 = call i32 @pytorch(float* %3, float* %6)
[DEBUG llvm_codegen.cpp:632]   ret i32 %7
[DEBUG llvm_codegen.cpp:632] }
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] declare noalias i8* @malloc(i64)
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] define private void @func(i64 %0, i8* %1) {
[DEBUG llvm_codegen.cpp:632] func_body:
[DEBUG llvm_codegen.cpp:632]   %2 = bitcast i8* %1 to %0*
[DEBUG llvm_codegen.cpp:632]   %3 = getelementptr inbounds %0, %0* %2, i32 0, i32 0
[DEBUG llvm_codegen.cpp:632]   %4 = load float*, float** %3, align 8
[DEBUG llvm_codegen.cpp:632]   %5 = getelementptr inbounds %0, %0* %2, i32 0, i32 1
[DEBUG llvm_codegen.cpp:632]   %6 = load float*, float** %5, align 8
[DEBUG llvm_codegen.cpp:632]   %7 = getelementptr inbounds %0, %0* %2, i32 0, i32 2
[DEBUG llvm_codegen.cpp:632]   %8 = load float*, float** %7, align 8
[DEBUG llvm_codegen.cpp:632]   %9 = getelementptr inbounds %0, %0* %2, i32 0, i32 3
[DEBUG llvm_codegen.cpp:632]   %10 = load float*, float** %9, align 8
[DEBUG llvm_codegen.cpp:632]   %11 = getelementptr inbounds %0, %0* %2, i32 0, i32 4
[DEBUG llvm_codegen.cpp:632]   %12 = load float*, float** %11, align 8
[DEBUG llvm_codegen.cpp:632]   %13 = getelementptr inbounds %0, %0* %2, i32 0, i32 5
[DEBUG llvm_codegen.cpp:632]   %14 = load float*, float** %13, align 8
[DEBUG llvm_codegen.cpp:632]   %15 = getelementptr float, float* %8, i64 %0
[DEBUG llvm_codegen.cpp:632]   store float 0x3810000000000000, float* %15, align 4
[DEBUG llvm_codegen.cpp:632]   %16 = mul i64 8, %0
[DEBUG llvm_codegen.cpp:632]   %17 = getelementptr float, float* %6, i64 %16
[DEBUG llvm_codegen.cpp:632]   %18 = bitcast float* %17 to <8 x float>*
[DEBUG llvm_codegen.cpp:632]   store <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, <8 x float>* %18, align 4
[DEBUG llvm_codegen.cpp:632]   br label %cond
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] cond:                                             ; preds = %body, %func_body
[DEBUG llvm_codegen.cpp:632]   %19 = phi i64 [ 0, %func_body ], [ %38, %body ]
[DEBUG llvm_codegen.cpp:632]   %20 = icmp slt i64 %19, 16
[DEBUG llvm_codegen.cpp:632]   br i1 %20, label %body, label %exit
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] body:                                             ; preds = %cond
[DEBUG llvm_codegen.cpp:632]   %21 = mul i64 8, %0
[DEBUG llvm_codegen.cpp:632]   %22 = getelementptr float, float* %6, i64 %21
[DEBUG llvm_codegen.cpp:632]   %23 = bitcast float* %22 to <8 x float>*
[DEBUG llvm_codegen.cpp:632]   %24 = load <8 x float>, <8 x float>* %23, align 4
[DEBUG llvm_codegen.cpp:632]   %25 = mul i64 16, %0
[DEBUG llvm_codegen.cpp:632]   %26 = add i64 %25, %19
[DEBUG llvm_codegen.cpp:632]   %27 = mul i64 8, %26
[DEBUG llvm_codegen.cpp:632]   %28 = getelementptr float, float* %12, i64 %27
[DEBUG llvm_codegen.cpp:632]   %29 = bitcast float* %28 to <8 x float>*
[DEBUG llvm_codegen.cpp:632]   %30 = load <8 x float>, <8 x float>* %29, align 4
[DEBUG llvm_codegen.cpp:632]   %31 = fcmp ogt <8 x float> %24, %30
[DEBUG llvm_codegen.cpp:632]   %32 = select <8 x i1> %31, <8 x float> %24, <8 x float> %30
[DEBUG llvm_codegen.cpp:632]   %33 = fcmp uno <8 x float> %24, zeroinitializer
[DEBUG llvm_codegen.cpp:632]   %34 = select <8 x i1> %33, <8 x float> %24, <8 x float> %32
[DEBUG llvm_codegen.cpp:632]   %35 = mul i64 8, %0
[DEBUG llvm_codegen.cpp:632]   %36 = getelementptr float, float* %6, i64 %35
[DEBUG llvm_codegen.cpp:632]   %37 = bitcast float* %36 to <8 x float>*
[DEBUG llvm_codegen.cpp:632]   store <8 x float> %34, <8 x float>* %37, align 4
[DEBUG llvm_codegen.cpp:632]   %38 = add i64 %19, 1
[DEBUG llvm_codegen.cpp:632]   br label %cond
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] exit:                                             ; preds = %cond
[DEBUG llvm_codegen.cpp:632]   br label %cond1
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] cond1:                                            ; preds = %body2, %exit
[DEBUG llvm_codegen.cpp:632]   %39 = phi i64 [ 0, %exit ], [ %52, %body2 ]
[DEBUG llvm_codegen.cpp:632]   %40 = icmp slt i64 %39, 8
[DEBUG llvm_codegen.cpp:632]   br i1 %40, label %body2, label %exit3
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] body2:                                            ; preds = %cond1
[DEBUG llvm_codegen.cpp:632]   %41 = getelementptr float, float* %8, i64 %0
[DEBUG llvm_codegen.cpp:632]   %42 = load float, float* %41, align 4
[DEBUG llvm_codegen.cpp:632]   %43 = mul i64 8, %0
[DEBUG llvm_codegen.cpp:632]   %44 = add i64 %39, %43
[DEBUG llvm_codegen.cpp:632]   %45 = getelementptr float, float* %6, i64 %44
[DEBUG llvm_codegen.cpp:632]   %46 = load float, float* %45, align 4
[DEBUG llvm_codegen.cpp:632]   %47 = fcmp ogt float %42, %46
[DEBUG llvm_codegen.cpp:632]   %48 = select i1 %47, float %42, float %46
[DEBUG llvm_codegen.cpp:632]   %49 = fcmp uno float %42, 0.000000e+00
[DEBUG llvm_codegen.cpp:632]   %50 = select i1 %49, float %42, float %48
[DEBUG llvm_codegen.cpp:632]   %51 = getelementptr float, float* %8, i64 %0
[DEBUG llvm_codegen.cpp:632]   store float %50, float* %51, align 4
[DEBUG llvm_codegen.cpp:632]   %52 = add i64 %39, 1
[DEBUG llvm_codegen.cpp:632]   br label %cond1
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] exit3:                                            ; preds = %cond1
[DEBUG llvm_codegen.cpp:632]   %53 = getelementptr float, float* %10, i64 %0
[DEBUG llvm_codegen.cpp:632]   store float 0.000000e+00, float* %53, align 4
[DEBUG llvm_codegen.cpp:632]   %54 = mul i64 8, %0
[DEBUG llvm_codegen.cpp:632]   %55 = getelementptr float, float* %14, i64 %54
[DEBUG llvm_codegen.cpp:632]   %56 = bitcast float* %55 to <8 x float>*
[DEBUG llvm_codegen.cpp:632]   store <8 x float> zeroinitializer, <8 x float>* %56, align 4
[DEBUG llvm_codegen.cpp:632]   br label %cond4
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] cond4:                                            ; preds = %body5, %exit3
[DEBUG llvm_codegen.cpp:632]   %57 = phi i64 [ 0, %exit3 ], [ %77, %body5 ]
[DEBUG llvm_codegen.cpp:632]   %58 = icmp slt i64 %57, 16
[DEBUG llvm_codegen.cpp:632]   br i1 %58, label %body5, label %exit6
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] body5:                                            ; preds = %cond4
[DEBUG llvm_codegen.cpp:632]   %59 = mul i64 8, %0
[DEBUG llvm_codegen.cpp:632]   %60 = getelementptr float, float* %14, i64 %59
[DEBUG llvm_codegen.cpp:632]   %61 = bitcast float* %60 to <8 x float>*
[DEBUG llvm_codegen.cpp:632]   %62 = load <8 x float>, <8 x float>* %61, align 4
[DEBUG llvm_codegen.cpp:632]   %63 = mul i64 16, %0
[DEBUG llvm_codegen.cpp:632]   %64 = add i64 %63, %57
[DEBUG llvm_codegen.cpp:632]   %65 = mul i64 8, %64
[DEBUG llvm_codegen.cpp:632]   %66 = getelementptr float, float* %12, i64 %65
[DEBUG llvm_codegen.cpp:632]   %67 = bitcast float* %66 to <8 x float>*
[DEBUG llvm_codegen.cpp:632]   %68 = load <8 x float>, <8 x float>* %67, align 4
[DEBUG llvm_codegen.cpp:632]   %69 = getelementptr float, float* %8, i64 %0
[DEBUG llvm_codegen.cpp:632]   %70 = load float, float* %69, align 4
[DEBUG llvm_codegen.cpp:632]   %.splatinsert = insertelement <8 x float> poison, float %70, i32 0
[DEBUG llvm_codegen.cpp:632]   %.splat = shufflevector <8 x float> %.splatinsert, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:632]   %71 = fsub <8 x float> %68, %.splat
[DEBUG llvm_codegen.cpp:632]   %72 = call <8 x float> @Sleef_expf8(<8 x float> %71)
[DEBUG llvm_codegen.cpp:632]   %73 = fadd <8 x float> %62, %72
[DEBUG llvm_codegen.cpp:632]   %74 = mul i64 8, %0
[DEBUG llvm_codegen.cpp:632]   %75 = getelementptr float, float* %14, i64 %74
[DEBUG llvm_codegen.cpp:632]   %76 = bitcast float* %75 to <8 x float>*
[DEBUG llvm_codegen.cpp:632]   store <8 x float> %73, <8 x float>* %76, align 4
[DEBUG llvm_codegen.cpp:632]   %77 = add i64 %57, 1
[DEBUG llvm_codegen.cpp:632]   br label %cond4
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] exit6:                                            ; preds = %cond4
[DEBUG llvm_codegen.cpp:632]   br label %cond7
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] cond7:                                            ; preds = %body8, %exit6
[DEBUG llvm_codegen.cpp:632]   %78 = phi i64 [ 0, %exit6 ], [ %88, %body8 ]
[DEBUG llvm_codegen.cpp:632]   %79 = icmp slt i64 %78, 8
[DEBUG llvm_codegen.cpp:632]   br i1 %79, label %body8, label %exit9
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] body8:                                            ; preds = %cond7
[DEBUG llvm_codegen.cpp:632]   %80 = getelementptr float, float* %10, i64 %0
[DEBUG llvm_codegen.cpp:632]   %81 = load float, float* %80, align 4
[DEBUG llvm_codegen.cpp:632]   %82 = mul i64 8, %0
[DEBUG llvm_codegen.cpp:632]   %83 = add i64 %78, %82
[DEBUG llvm_codegen.cpp:632]   %84 = getelementptr float, float* %14, i64 %83
[DEBUG llvm_codegen.cpp:632]   %85 = load float, float* %84, align 4
[DEBUG llvm_codegen.cpp:632]   %86 = fadd float %81, %85
[DEBUG llvm_codegen.cpp:632]   %87 = getelementptr float, float* %10, i64 %0
[DEBUG llvm_codegen.cpp:632]   store float %86, float* %87, align 4
[DEBUG llvm_codegen.cpp:632]   %88 = add i64 %78, 1
[DEBUG llvm_codegen.cpp:632]   br label %cond7
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] exit9:                                            ; preds = %cond7
[DEBUG llvm_codegen.cpp:632]   br label %cond10
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] cond10:                                           ; preds = %body11, %exit9
[DEBUG llvm_codegen.cpp:632]   %89 = phi i64 [ 0, %exit9 ], [ %110, %body11 ]
[DEBUG llvm_codegen.cpp:632]   %90 = icmp slt i64 %89, 16
[DEBUG llvm_codegen.cpp:632]   br i1 %90, label %body11, label %exit12
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] body11:                                           ; preds = %cond10
[DEBUG llvm_codegen.cpp:632]   %91 = mul i64 16, %0
[DEBUG llvm_codegen.cpp:632]   %92 = add i64 %91, %89
[DEBUG llvm_codegen.cpp:632]   %93 = mul i64 8, %92
[DEBUG llvm_codegen.cpp:632]   %94 = getelementptr float, float* %12, i64 %93
[DEBUG llvm_codegen.cpp:632]   %95 = bitcast float* %94 to <8 x float>*
[DEBUG llvm_codegen.cpp:632]   %96 = load <8 x float>, <8 x float>* %95, align 4
[DEBUG llvm_codegen.cpp:632]   %97 = getelementptr float, float* %8, i64 %0
[DEBUG llvm_codegen.cpp:632]   %98 = load float, float* %97, align 4
[DEBUG llvm_codegen.cpp:632]   %.splatinsert13 = insertelement <8 x float> poison, float %98, i32 0
[DEBUG llvm_codegen.cpp:632]   %.splat14 = shufflevector <8 x float> %.splatinsert13, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:632]   %99 = fsub <8 x float> %96, %.splat14
[DEBUG llvm_codegen.cpp:632]   %100 = call <8 x float> @Sleef_expf8(<8 x float> %99)
[DEBUG llvm_codegen.cpp:632]   %101 = getelementptr float, float* %10, i64 %0
[DEBUG llvm_codegen.cpp:632]   %102 = load float, float* %101, align 4
[DEBUG llvm_codegen.cpp:632]   %103 = fdiv float 1.000000e+00, %102
[DEBUG llvm_codegen.cpp:632]   %.splatinsert15 = insertelement <8 x float> poison, float %103, i32 0
[DEBUG llvm_codegen.cpp:632]   %.splat16 = shufflevector <8 x float> %.splatinsert15, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:632]   %104 = fmul <8 x float> %100, %.splat16
[DEBUG llvm_codegen.cpp:632]   %105 = mul i64 16, %0
[DEBUG llvm_codegen.cpp:632]   %106 = add i64 %105, %89
[DEBUG llvm_codegen.cpp:632]   %107 = mul i64 8, %106
[DEBUG llvm_codegen.cpp:632]   %108 = getelementptr float, float* %4, i64 %107
[DEBUG llvm_codegen.cpp:632]   %109 = bitcast float* %108 to <8 x float>*
[DEBUG llvm_codegen.cpp:632]   store <8 x float> %104, <8 x float>* %109, align 4
[DEBUG llvm_codegen.cpp:632]   %110 = add i64 %89, 1
[DEBUG llvm_codegen.cpp:632]   br label %cond10
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] exit12:                                           ; preds = %cond10
[DEBUG llvm_codegen.cpp:632]   ret void
[DEBUG llvm_codegen.cpp:632] }
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] ; Function Attrs: nofree nounwind readnone willreturn
[DEBUG llvm_codegen.cpp:632] declare <8 x float> @Sleef_expf8(<8 x float>) #1
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] ; Function Attrs: nounwind
[DEBUG llvm_codegen.cpp:632] declare void @DispatchParallel(i8*, i64, i64, i8*) #2
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] declare void @free(i8*)
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] ; Function Attrs: nounwind
[DEBUG llvm_codegen.cpp:632] declare void @nnc_aten_free(i64, i8**) #2
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:632] attributes #0 = { alwaysinline }
[DEBUG llvm_codegen.cpp:632] attributes #1 = { nofree nounwind readnone willreturn }
[DEBUG llvm_codegen.cpp:632] attributes #2 = { nounwind }
[DEBUG llvm_codegen.cpp:632] 
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] LLVM module after optimizations
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] ; ModuleID = 'pytorch'
[DEBUG llvm_codegen.cpp:644] source_filename = "pytorch"
[DEBUG llvm_codegen.cpp:644] target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
[DEBUG llvm_codegen.cpp:644] target triple = "x86_64-unknown-linux-gnu"
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] %0 = type { float*, float*, float*, float*, float*, float* }
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] ; Function Attrs: nounwind
[DEBUG llvm_codegen.cpp:644] define i32 @fused_softmax(i8** nocapture readonly %0) local_unnamed_addr #0 {
[DEBUG llvm_codegen.cpp:644] wrapBB:
[DEBUG llvm_codegen.cpp:644]   %1 = alloca [0 x i8*], align 8
[DEBUG llvm_codegen.cpp:644]   %2 = alloca %0, align 8
[DEBUG llvm_codegen.cpp:644]   %3 = bitcast i8** %0 to float**
[DEBUG llvm_codegen.cpp:644]   %4 = load float*, float** %3, align 8
[DEBUG llvm_codegen.cpp:644]   %5 = getelementptr i8*, i8** %0, i64 1
[DEBUG llvm_codegen.cpp:644]   %6 = bitcast i8** %5 to float**
[DEBUG llvm_codegen.cpp:644]   %7 = load float*, float** %6, align 8
[DEBUG llvm_codegen.cpp:644]   call void @llvm.experimental.noalias.scope.decl(metadata !0)
[DEBUG llvm_codegen.cpp:644]   call void @llvm.experimental.noalias.scope.decl(metadata !3)
[DEBUG llvm_codegen.cpp:644]   %8 = bitcast [0 x i8*]* %1 to i8*
[DEBUG llvm_codegen.cpp:644]   call void @llvm.lifetime.start.p0i8(i64 0, i8* %8)
[DEBUG llvm_codegen.cpp:644]   %9 = bitcast %0* %2 to i8*
[DEBUG llvm_codegen.cpp:644]   call void @llvm.lifetime.start.p0i8(i64 48, i8* %9)
[DEBUG llvm_codegen.cpp:644]   %malloccall.i = tail call dereferenceable_or_null(524288) i8* @malloc(i64 524288) #0
[DEBUG llvm_codegen.cpp:644]   %malloccall1.i = tail call dereferenceable_or_null(65536) i8* @malloc(i64 65536) #0
[DEBUG llvm_codegen.cpp:644]   %malloccall2.i = tail call dereferenceable_or_null(65536) i8* @malloc(i64 65536) #0
[DEBUG llvm_codegen.cpp:644]   %malloccall3.i = tail call dereferenceable_or_null(524288) i8* @malloc(i64 524288) #0
[DEBUG llvm_codegen.cpp:644]   %10 = getelementptr inbounds %0, %0* %2, i64 0, i32 0
[DEBUG llvm_codegen.cpp:644]   store float* %7, float** %10, align 8, !noalias !5
[DEBUG llvm_codegen.cpp:644]   %11 = getelementptr inbounds %0, %0* %2, i64 0, i32 1
[DEBUG llvm_codegen.cpp:644]   %12 = bitcast float** %11 to i8**
[DEBUG llvm_codegen.cpp:644]   store i8* %malloccall3.i, i8** %12, align 8, !noalias !5
[DEBUG llvm_codegen.cpp:644]   %13 = getelementptr inbounds %0, %0* %2, i64 0, i32 2
[DEBUG llvm_codegen.cpp:644]   %14 = bitcast float** %13 to i8**
[DEBUG llvm_codegen.cpp:644]   store i8* %malloccall2.i, i8** %14, align 8, !noalias !5
[DEBUG llvm_codegen.cpp:644]   %15 = getelementptr inbounds %0, %0* %2, i64 0, i32 3
[DEBUG llvm_codegen.cpp:644]   %16 = bitcast float** %15 to i8**
[DEBUG llvm_codegen.cpp:644]   store i8* %malloccall1.i, i8** %16, align 8, !noalias !5
[DEBUG llvm_codegen.cpp:644]   %17 = getelementptr inbounds %0, %0* %2, i64 0, i32 4
[DEBUG llvm_codegen.cpp:644]   store float* %4, float** %17, align 8, !noalias !5
[DEBUG llvm_codegen.cpp:644]   %18 = getelementptr inbounds %0, %0* %2, i64 0, i32 5
[DEBUG llvm_codegen.cpp:644]   %19 = bitcast float** %18 to i8**
[DEBUG llvm_codegen.cpp:644]   store i8* %malloccall.i, i8** %19, align 8, !noalias !5
[DEBUG llvm_codegen.cpp:644]   call void @DispatchParallel(i8* bitcast (void (i64, i8*)* @func to i8*), i64 0, i64 16384, i8* nonnull %9) #0
[DEBUG llvm_codegen.cpp:644]   tail call void @free(i8* %malloccall3.i) #0
[DEBUG llvm_codegen.cpp:644]   tail call void @free(i8* %malloccall2.i) #0
[DEBUG llvm_codegen.cpp:644]   tail call void @free(i8* %malloccall1.i) #0
[DEBUG llvm_codegen.cpp:644]   tail call void @free(i8* %malloccall.i) #0
[DEBUG llvm_codegen.cpp:644]   %.sub.i = getelementptr inbounds [0 x i8*], [0 x i8*]* %1, i64 0, i64 0
[DEBUG llvm_codegen.cpp:644]   call void @nnc_aten_free(i64 0, i8** nonnull %.sub.i) #0
[DEBUG llvm_codegen.cpp:644]   call void @llvm.lifetime.end.p0i8(i64 0, i8* %8)
[DEBUG llvm_codegen.cpp:644]   call void @llvm.lifetime.end.p0i8(i64 48, i8* %9)
[DEBUG llvm_codegen.cpp:644]   ret i32 0
[DEBUG llvm_codegen.cpp:644] }
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] ; Function Attrs: inaccessiblememonly mustprogress nofree nounwind willreturn
[DEBUG llvm_codegen.cpp:644] declare noalias noundef i8* @malloc(i64 noundef) local_unnamed_addr #1
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] ; Function Attrs: nofree nosync nounwind
[DEBUG llvm_codegen.cpp:644] define private void @func(i64 %0, i8* nocapture readonly %1) #2 {
[DEBUG llvm_codegen.cpp:644] func_body:
[DEBUG llvm_codegen.cpp:644]   %2 = bitcast i8* %1 to float**
[DEBUG llvm_codegen.cpp:644]   %3 = load float*, float** %2, align 8
[DEBUG llvm_codegen.cpp:644]   %4 = getelementptr inbounds i8, i8* %1, i64 8
[DEBUG llvm_codegen.cpp:644]   %5 = bitcast i8* %4 to float**
[DEBUG llvm_codegen.cpp:644]   %6 = load float*, float** %5, align 8
[DEBUG llvm_codegen.cpp:644]   %7 = getelementptr inbounds i8, i8* %1, i64 16
[DEBUG llvm_codegen.cpp:644]   %8 = bitcast i8* %7 to float**
[DEBUG llvm_codegen.cpp:644]   %9 = load float*, float** %8, align 8
[DEBUG llvm_codegen.cpp:644]   %10 = getelementptr inbounds i8, i8* %1, i64 24
[DEBUG llvm_codegen.cpp:644]   %11 = bitcast i8* %10 to float**
[DEBUG llvm_codegen.cpp:644]   %12 = load float*, float** %11, align 8
[DEBUG llvm_codegen.cpp:644]   %13 = getelementptr inbounds i8, i8* %1, i64 32
[DEBUG llvm_codegen.cpp:644]   %14 = bitcast i8* %13 to float**
[DEBUG llvm_codegen.cpp:644]   %15 = load float*, float** %14, align 8
[DEBUG llvm_codegen.cpp:644]   %16 = getelementptr inbounds i8, i8* %1, i64 40
[DEBUG llvm_codegen.cpp:644]   %17 = bitcast i8* %16 to float**
[DEBUG llvm_codegen.cpp:644]   %18 = load float*, float** %17, align 8
[DEBUG llvm_codegen.cpp:644]   %19 = getelementptr float, float* %9, i64 %0
[DEBUG llvm_codegen.cpp:644]   store float 0x3810000000000000, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %20 = shl i64 %0, 3
[DEBUG llvm_codegen.cpp:644]   %21 = getelementptr float, float* %6, i64 %20
[DEBUG llvm_codegen.cpp:644]   %22 = bitcast float* %21 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %23 = shl i64 %0, 7
[DEBUG llvm_codegen.cpp:644]   %24 = getelementptr float, float* %15, i64 %23
[DEBUG llvm_codegen.cpp:644]   %25 = bitcast float* %24 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %26 = load <8 x float>, <8 x float>* %25, align 4
[DEBUG llvm_codegen.cpp:644]   %27 = fcmp olt <8 x float> %26, <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>
[DEBUG llvm_codegen.cpp:644]   %28 = select <8 x i1> %27, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, <8 x float> %26
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %28, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %29 = or i64 %23, 8
[DEBUG llvm_codegen.cpp:644]   %30 = getelementptr float, float* %15, i64 %29
[DEBUG llvm_codegen.cpp:644]   %31 = bitcast float* %30 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %32 = load <8 x float>, <8 x float>* %31, align 4
[DEBUG llvm_codegen.cpp:644]   %33 = fcmp ogt <8 x float> %28, %32
[DEBUG llvm_codegen.cpp:644]   %34 = fcmp uno <8 x float> %28, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %35 = select <8 x i1> %34, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %33
[DEBUG llvm_codegen.cpp:644]   %36 = select <8 x i1> %35, <8 x float> %28, <8 x float> %32
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %36, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %37 = or i64 %23, 16
[DEBUG llvm_codegen.cpp:644]   %38 = getelementptr float, float* %15, i64 %37
[DEBUG llvm_codegen.cpp:644]   %39 = bitcast float* %38 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %40 = load <8 x float>, <8 x float>* %39, align 4
[DEBUG llvm_codegen.cpp:644]   %41 = fcmp ogt <8 x float> %36, %40
[DEBUG llvm_codegen.cpp:644]   %42 = fcmp uno <8 x float> %36, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %43 = select <8 x i1> %42, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %41
[DEBUG llvm_codegen.cpp:644]   %44 = select <8 x i1> %43, <8 x float> %36, <8 x float> %40
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %44, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %45 = or i64 %23, 24
[DEBUG llvm_codegen.cpp:644]   %46 = getelementptr float, float* %15, i64 %45
[DEBUG llvm_codegen.cpp:644]   %47 = bitcast float* %46 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %48 = load <8 x float>, <8 x float>* %47, align 4
[DEBUG llvm_codegen.cpp:644]   %49 = fcmp ogt <8 x float> %44, %48
[DEBUG llvm_codegen.cpp:644]   %50 = fcmp uno <8 x float> %44, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %51 = select <8 x i1> %50, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %49
[DEBUG llvm_codegen.cpp:644]   %52 = select <8 x i1> %51, <8 x float> %44, <8 x float> %48
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %52, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %53 = or i64 %23, 32
[DEBUG llvm_codegen.cpp:644]   %54 = getelementptr float, float* %15, i64 %53
[DEBUG llvm_codegen.cpp:644]   %55 = bitcast float* %54 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %56 = load <8 x float>, <8 x float>* %55, align 4
[DEBUG llvm_codegen.cpp:644]   %57 = fcmp ogt <8 x float> %52, %56
[DEBUG llvm_codegen.cpp:644]   %58 = fcmp uno <8 x float> %52, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %59 = select <8 x i1> %58, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %57
[DEBUG llvm_codegen.cpp:644]   %60 = select <8 x i1> %59, <8 x float> %52, <8 x float> %56
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %60, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %61 = or i64 %23, 40
[DEBUG llvm_codegen.cpp:644]   %62 = getelementptr float, float* %15, i64 %61
[DEBUG llvm_codegen.cpp:644]   %63 = bitcast float* %62 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %64 = load <8 x float>, <8 x float>* %63, align 4
[DEBUG llvm_codegen.cpp:644]   %65 = fcmp ogt <8 x float> %60, %64
[DEBUG llvm_codegen.cpp:644]   %66 = fcmp uno <8 x float> %60, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %67 = select <8 x i1> %66, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %65
[DEBUG llvm_codegen.cpp:644]   %68 = select <8 x i1> %67, <8 x float> %60, <8 x float> %64
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %68, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %69 = or i64 %23, 48
[DEBUG llvm_codegen.cpp:644]   %70 = getelementptr float, float* %15, i64 %69
[DEBUG llvm_codegen.cpp:644]   %71 = bitcast float* %70 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %72 = load <8 x float>, <8 x float>* %71, align 4
[DEBUG llvm_codegen.cpp:644]   %73 = fcmp ogt <8 x float> %68, %72
[DEBUG llvm_codegen.cpp:644]   %74 = fcmp uno <8 x float> %68, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %75 = select <8 x i1> %74, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %73
[DEBUG llvm_codegen.cpp:644]   %76 = select <8 x i1> %75, <8 x float> %68, <8 x float> %72
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %76, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %77 = or i64 %23, 56
[DEBUG llvm_codegen.cpp:644]   %78 = getelementptr float, float* %15, i64 %77
[DEBUG llvm_codegen.cpp:644]   %79 = bitcast float* %78 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %80 = load <8 x float>, <8 x float>* %79, align 4
[DEBUG llvm_codegen.cpp:644]   %81 = fcmp ogt <8 x float> %76, %80
[DEBUG llvm_codegen.cpp:644]   %82 = fcmp uno <8 x float> %76, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %83 = select <8 x i1> %82, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %81
[DEBUG llvm_codegen.cpp:644]   %84 = select <8 x i1> %83, <8 x float> %76, <8 x float> %80
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %84, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %85 = or i64 %23, 64
[DEBUG llvm_codegen.cpp:644]   %86 = getelementptr float, float* %15, i64 %85
[DEBUG llvm_codegen.cpp:644]   %87 = bitcast float* %86 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %88 = load <8 x float>, <8 x float>* %87, align 4
[DEBUG llvm_codegen.cpp:644]   %89 = fcmp ogt <8 x float> %84, %88
[DEBUG llvm_codegen.cpp:644]   %90 = fcmp uno <8 x float> %84, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %91 = select <8 x i1> %90, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %89
[DEBUG llvm_codegen.cpp:644]   %92 = select <8 x i1> %91, <8 x float> %84, <8 x float> %88
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %92, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %93 = or i64 %23, 72
[DEBUG llvm_codegen.cpp:644]   %94 = getelementptr float, float* %15, i64 %93
[DEBUG llvm_codegen.cpp:644]   %95 = bitcast float* %94 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %96 = load <8 x float>, <8 x float>* %95, align 4
[DEBUG llvm_codegen.cpp:644]   %97 = fcmp ogt <8 x float> %92, %96
[DEBUG llvm_codegen.cpp:644]   %98 = fcmp uno <8 x float> %92, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %99 = select <8 x i1> %98, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %97
[DEBUG llvm_codegen.cpp:644]   %100 = select <8 x i1> %99, <8 x float> %92, <8 x float> %96
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %100, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %101 = or i64 %23, 80
[DEBUG llvm_codegen.cpp:644]   %102 = getelementptr float, float* %15, i64 %101
[DEBUG llvm_codegen.cpp:644]   %103 = bitcast float* %102 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %104 = load <8 x float>, <8 x float>* %103, align 4
[DEBUG llvm_codegen.cpp:644]   %105 = fcmp ogt <8 x float> %100, %104
[DEBUG llvm_codegen.cpp:644]   %106 = fcmp uno <8 x float> %100, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %107 = select <8 x i1> %106, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %105
[DEBUG llvm_codegen.cpp:644]   %108 = select <8 x i1> %107, <8 x float> %100, <8 x float> %104
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %108, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %109 = or i64 %23, 88
[DEBUG llvm_codegen.cpp:644]   %110 = getelementptr float, float* %15, i64 %109
[DEBUG llvm_codegen.cpp:644]   %111 = bitcast float* %110 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %112 = load <8 x float>, <8 x float>* %111, align 4
[DEBUG llvm_codegen.cpp:644]   %113 = fcmp ogt <8 x float> %108, %112
[DEBUG llvm_codegen.cpp:644]   %114 = fcmp uno <8 x float> %108, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %115 = select <8 x i1> %114, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %113
[DEBUG llvm_codegen.cpp:644]   %116 = select <8 x i1> %115, <8 x float> %108, <8 x float> %112
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %116, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %117 = or i64 %23, 96
[DEBUG llvm_codegen.cpp:644]   %118 = getelementptr float, float* %15, i64 %117
[DEBUG llvm_codegen.cpp:644]   %119 = bitcast float* %118 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %120 = load <8 x float>, <8 x float>* %119, align 4
[DEBUG llvm_codegen.cpp:644]   %121 = fcmp ogt <8 x float> %116, %120
[DEBUG llvm_codegen.cpp:644]   %122 = fcmp uno <8 x float> %116, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %123 = select <8 x i1> %122, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %121
[DEBUG llvm_codegen.cpp:644]   %124 = select <8 x i1> %123, <8 x float> %116, <8 x float> %120
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %124, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %125 = or i64 %23, 104
[DEBUG llvm_codegen.cpp:644]   %126 = getelementptr float, float* %15, i64 %125
[DEBUG llvm_codegen.cpp:644]   %127 = bitcast float* %126 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %128 = load <8 x float>, <8 x float>* %127, align 4
[DEBUG llvm_codegen.cpp:644]   %129 = fcmp ogt <8 x float> %124, %128
[DEBUG llvm_codegen.cpp:644]   %130 = fcmp uno <8 x float> %124, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %131 = select <8 x i1> %130, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %129
[DEBUG llvm_codegen.cpp:644]   %132 = select <8 x i1> %131, <8 x float> %124, <8 x float> %128
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %132, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %133 = or i64 %23, 112
[DEBUG llvm_codegen.cpp:644]   %134 = getelementptr float, float* %15, i64 %133
[DEBUG llvm_codegen.cpp:644]   %135 = bitcast float* %134 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %136 = load <8 x float>, <8 x float>* %135, align 4
[DEBUG llvm_codegen.cpp:644]   %137 = fcmp ogt <8 x float> %132, %136
[DEBUG llvm_codegen.cpp:644]   %138 = fcmp uno <8 x float> %132, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %139 = select <8 x i1> %138, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %137
[DEBUG llvm_codegen.cpp:644]   %140 = select <8 x i1> %139, <8 x float> %132, <8 x float> %136
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %140, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %141 = or i64 %23, 120
[DEBUG llvm_codegen.cpp:644]   %142 = getelementptr float, float* %15, i64 %141
[DEBUG llvm_codegen.cpp:644]   %143 = bitcast float* %142 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   %144 = load <8 x float>, <8 x float>* %143, align 4
[DEBUG llvm_codegen.cpp:644]   %145 = fcmp ogt <8 x float> %140, %144
[DEBUG llvm_codegen.cpp:644]   %146 = fcmp uno <8 x float> %140, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %147 = select <8 x i1> %146, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %145
[DEBUG llvm_codegen.cpp:644]   %148 = select <8 x i1> %147, <8 x float> %140, <8 x float> %144
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %148, <8 x float>* %22, align 4
[DEBUG llvm_codegen.cpp:644]   %149 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %150 = extractelement <8 x float> %148, i32 0
[DEBUG llvm_codegen.cpp:644]   %151 = fcmp ogt float %149, %150
[DEBUG llvm_codegen.cpp:644]   %152 = fcmp uno float %149, 0.000000e+00
[DEBUG llvm_codegen.cpp:644]   %153 = select i1 %152, i1 true, i1 %151
[DEBUG llvm_codegen.cpp:644]   %154 = select i1 %153, float %149, float %150
[DEBUG llvm_codegen.cpp:644]   store float %154, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %155 = or i64 %20, 1
[DEBUG llvm_codegen.cpp:644]   %156 = getelementptr float, float* %6, i64 %155
[DEBUG llvm_codegen.cpp:644]   %157 = load float, float* %156, align 4
[DEBUG llvm_codegen.cpp:644]   %158 = fcmp ogt float %154, %157
[DEBUG llvm_codegen.cpp:644]   %159 = fcmp uno float %154, 0.000000e+00
[DEBUG llvm_codegen.cpp:644]   %160 = select i1 %159, i1 true, i1 %158
[DEBUG llvm_codegen.cpp:644]   %161 = select i1 %160, float %154, float %157
[DEBUG llvm_codegen.cpp:644]   store float %161, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %162 = or i64 %20, 2
[DEBUG llvm_codegen.cpp:644]   %163 = getelementptr float, float* %6, i64 %162
[DEBUG llvm_codegen.cpp:644]   %164 = load float, float* %163, align 4
[DEBUG llvm_codegen.cpp:644]   %165 = fcmp ogt float %161, %164
[DEBUG llvm_codegen.cpp:644]   %166 = fcmp uno float %161, 0.000000e+00
[DEBUG llvm_codegen.cpp:644]   %167 = select i1 %166, i1 true, i1 %165
[DEBUG llvm_codegen.cpp:644]   %168 = select i1 %167, float %161, float %164
[DEBUG llvm_codegen.cpp:644]   store float %168, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %169 = or i64 %20, 3
[DEBUG llvm_codegen.cpp:644]   %170 = getelementptr float, float* %6, i64 %169
[DEBUG llvm_codegen.cpp:644]   %171 = load float, float* %170, align 4
[DEBUG llvm_codegen.cpp:644]   %172 = fcmp ogt float %168, %171
[DEBUG llvm_codegen.cpp:644]   %173 = fcmp uno float %168, 0.000000e+00
[DEBUG llvm_codegen.cpp:644]   %174 = select i1 %173, i1 true, i1 %172
[DEBUG llvm_codegen.cpp:644]   %175 = select i1 %174, float %168, float %171
[DEBUG llvm_codegen.cpp:644]   store float %175, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %176 = or i64 %20, 4
[DEBUG llvm_codegen.cpp:644]   %177 = getelementptr float, float* %6, i64 %176
[DEBUG llvm_codegen.cpp:644]   %178 = load float, float* %177, align 4
[DEBUG llvm_codegen.cpp:644]   %179 = fcmp ogt float %175, %178
[DEBUG llvm_codegen.cpp:644]   %180 = fcmp uno float %175, 0.000000e+00
[DEBUG llvm_codegen.cpp:644]   %181 = select i1 %180, i1 true, i1 %179
[DEBUG llvm_codegen.cpp:644]   %182 = select i1 %181, float %175, float %178
[DEBUG llvm_codegen.cpp:644]   store float %182, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %183 = or i64 %20, 5
[DEBUG llvm_codegen.cpp:644]   %184 = getelementptr float, float* %6, i64 %183
[DEBUG llvm_codegen.cpp:644]   %185 = load float, float* %184, align 4
[DEBUG llvm_codegen.cpp:644]   %186 = fcmp ogt float %182, %185
[DEBUG llvm_codegen.cpp:644]   %187 = fcmp uno float %182, 0.000000e+00
[DEBUG llvm_codegen.cpp:644]   %188 = select i1 %187, i1 true, i1 %186
[DEBUG llvm_codegen.cpp:644]   %189 = select i1 %188, float %182, float %185
[DEBUG llvm_codegen.cpp:644]   store float %189, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %190 = or i64 %20, 6
[DEBUG llvm_codegen.cpp:644]   %191 = getelementptr float, float* %6, i64 %190
[DEBUG llvm_codegen.cpp:644]   %192 = load float, float* %191, align 4
[DEBUG llvm_codegen.cpp:644]   %193 = fcmp ogt float %189, %192
[DEBUG llvm_codegen.cpp:644]   %194 = fcmp uno float %189, 0.000000e+00
[DEBUG llvm_codegen.cpp:644]   %195 = select i1 %194, i1 true, i1 %193
[DEBUG llvm_codegen.cpp:644]   %196 = select i1 %195, float %189, float %192
[DEBUG llvm_codegen.cpp:644]   store float %196, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %197 = or i64 %20, 7
[DEBUG llvm_codegen.cpp:644]   %198 = getelementptr float, float* %6, i64 %197
[DEBUG llvm_codegen.cpp:644]   %199 = load float, float* %198, align 4
[DEBUG llvm_codegen.cpp:644]   %200 = fcmp ogt float %196, %199
[DEBUG llvm_codegen.cpp:644]   %201 = fcmp uno float %196, 0.000000e+00
[DEBUG llvm_codegen.cpp:644]   %202 = select i1 %201, i1 true, i1 %200
[DEBUG llvm_codegen.cpp:644]   %203 = select i1 %202, float %196, float %199
[DEBUG llvm_codegen.cpp:644]   store float %203, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %204 = getelementptr float, float* %12, i64 %0
[DEBUG llvm_codegen.cpp:644]   store float 0.000000e+00, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %205 = getelementptr float, float* %18, i64 %20
[DEBUG llvm_codegen.cpp:644]   %206 = bitcast float* %205 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> zeroinitializer, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %207 = load <8 x float>, <8 x float>* %25, align 4
[DEBUG llvm_codegen.cpp:644]   %208 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert = insertelement <8 x float> poison, float %208, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat = shufflevector <8 x float> %.splatinsert, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %209 = fsub <8 x float> %207, %.splat
[DEBUG llvm_codegen.cpp:644]   %210 = tail call <8 x float> @Sleef_expf8(<8 x float> %209)
[DEBUG llvm_codegen.cpp:644]   %211 = fadd <8 x float> %210, zeroinitializer
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %211, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %212 = load <8 x float>, <8 x float>* %31, align 4
[DEBUG llvm_codegen.cpp:644]   %213 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.1 = insertelement <8 x float> poison, float %213, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.1 = shufflevector <8 x float> %.splatinsert.1, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %214 = fsub <8 x float> %212, %.splat.1
[DEBUG llvm_codegen.cpp:644]   %215 = tail call <8 x float> @Sleef_expf8(<8 x float> %214)
[DEBUG llvm_codegen.cpp:644]   %216 = fadd <8 x float> %211, %215
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %216, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %217 = load <8 x float>, <8 x float>* %39, align 4
[DEBUG llvm_codegen.cpp:644]   %218 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.2 = insertelement <8 x float> poison, float %218, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.2 = shufflevector <8 x float> %.splatinsert.2, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %219 = fsub <8 x float> %217, %.splat.2
[DEBUG llvm_codegen.cpp:644]   %220 = tail call <8 x float> @Sleef_expf8(<8 x float> %219)
[DEBUG llvm_codegen.cpp:644]   %221 = fadd <8 x float> %216, %220
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %221, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %222 = load <8 x float>, <8 x float>* %47, align 4
[DEBUG llvm_codegen.cpp:644]   %223 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.3 = insertelement <8 x float> poison, float %223, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.3 = shufflevector <8 x float> %.splatinsert.3, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %224 = fsub <8 x float> %222, %.splat.3
[DEBUG llvm_codegen.cpp:644]   %225 = tail call <8 x float> @Sleef_expf8(<8 x float> %224)
[DEBUG llvm_codegen.cpp:644]   %226 = fadd <8 x float> %221, %225
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %226, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %227 = load <8 x float>, <8 x float>* %55, align 4
[DEBUG llvm_codegen.cpp:644]   %228 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.4 = insertelement <8 x float> poison, float %228, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.4 = shufflevector <8 x float> %.splatinsert.4, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %229 = fsub <8 x float> %227, %.splat.4
[DEBUG llvm_codegen.cpp:644]   %230 = tail call <8 x float> @Sleef_expf8(<8 x float> %229)
[DEBUG llvm_codegen.cpp:644]   %231 = fadd <8 x float> %226, %230
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %231, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %232 = load <8 x float>, <8 x float>* %63, align 4
[DEBUG llvm_codegen.cpp:644]   %233 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.5 = insertelement <8 x float> poison, float %233, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.5 = shufflevector <8 x float> %.splatinsert.5, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %234 = fsub <8 x float> %232, %.splat.5
[DEBUG llvm_codegen.cpp:644]   %235 = tail call <8 x float> @Sleef_expf8(<8 x float> %234)
[DEBUG llvm_codegen.cpp:644]   %236 = fadd <8 x float> %231, %235
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %236, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %237 = load <8 x float>, <8 x float>* %71, align 4
[DEBUG llvm_codegen.cpp:644]   %238 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.6 = insertelement <8 x float> poison, float %238, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.6 = shufflevector <8 x float> %.splatinsert.6, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %239 = fsub <8 x float> %237, %.splat.6
[DEBUG llvm_codegen.cpp:644]   %240 = tail call <8 x float> @Sleef_expf8(<8 x float> %239)
[DEBUG llvm_codegen.cpp:644]   %241 = fadd <8 x float> %236, %240
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %241, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %242 = load <8 x float>, <8 x float>* %79, align 4
[DEBUG llvm_codegen.cpp:644]   %243 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.7 = insertelement <8 x float> poison, float %243, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.7 = shufflevector <8 x float> %.splatinsert.7, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %244 = fsub <8 x float> %242, %.splat.7
[DEBUG llvm_codegen.cpp:644]   %245 = tail call <8 x float> @Sleef_expf8(<8 x float> %244)
[DEBUG llvm_codegen.cpp:644]   %246 = fadd <8 x float> %241, %245
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %246, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %247 = load <8 x float>, <8 x float>* %87, align 4
[DEBUG llvm_codegen.cpp:644]   %248 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.8 = insertelement <8 x float> poison, float %248, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.8 = shufflevector <8 x float> %.splatinsert.8, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %249 = fsub <8 x float> %247, %.splat.8
[DEBUG llvm_codegen.cpp:644]   %250 = tail call <8 x float> @Sleef_expf8(<8 x float> %249)
[DEBUG llvm_codegen.cpp:644]   %251 = fadd <8 x float> %246, %250
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %251, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %252 = load <8 x float>, <8 x float>* %95, align 4
[DEBUG llvm_codegen.cpp:644]   %253 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.9 = insertelement <8 x float> poison, float %253, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.9 = shufflevector <8 x float> %.splatinsert.9, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %254 = fsub <8 x float> %252, %.splat.9
[DEBUG llvm_codegen.cpp:644]   %255 = tail call <8 x float> @Sleef_expf8(<8 x float> %254)
[DEBUG llvm_codegen.cpp:644]   %256 = fadd <8 x float> %251, %255
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %256, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %257 = load <8 x float>, <8 x float>* %103, align 4
[DEBUG llvm_codegen.cpp:644]   %258 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.10 = insertelement <8 x float> poison, float %258, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.10 = shufflevector <8 x float> %.splatinsert.10, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %259 = fsub <8 x float> %257, %.splat.10
[DEBUG llvm_codegen.cpp:644]   %260 = tail call <8 x float> @Sleef_expf8(<8 x float> %259)
[DEBUG llvm_codegen.cpp:644]   %261 = fadd <8 x float> %256, %260
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %261, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %262 = load <8 x float>, <8 x float>* %111, align 4
[DEBUG llvm_codegen.cpp:644]   %263 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.11 = insertelement <8 x float> poison, float %263, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.11 = shufflevector <8 x float> %.splatinsert.11, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %264 = fsub <8 x float> %262, %.splat.11
[DEBUG llvm_codegen.cpp:644]   %265 = tail call <8 x float> @Sleef_expf8(<8 x float> %264)
[DEBUG llvm_codegen.cpp:644]   %266 = fadd <8 x float> %261, %265
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %266, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %267 = load <8 x float>, <8 x float>* %119, align 4
[DEBUG llvm_codegen.cpp:644]   %268 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.12 = insertelement <8 x float> poison, float %268, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.12 = shufflevector <8 x float> %.splatinsert.12, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %269 = fsub <8 x float> %267, %.splat.12
[DEBUG llvm_codegen.cpp:644]   %270 = tail call <8 x float> @Sleef_expf8(<8 x float> %269)
[DEBUG llvm_codegen.cpp:644]   %271 = fadd <8 x float> %266, %270
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %271, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %272 = load <8 x float>, <8 x float>* %127, align 4
[DEBUG llvm_codegen.cpp:644]   %273 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.13 = insertelement <8 x float> poison, float %273, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.13 = shufflevector <8 x float> %.splatinsert.13, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %274 = fsub <8 x float> %272, %.splat.13
[DEBUG llvm_codegen.cpp:644]   %275 = tail call <8 x float> @Sleef_expf8(<8 x float> %274)
[DEBUG llvm_codegen.cpp:644]   %276 = fadd <8 x float> %271, %275
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %276, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %277 = load <8 x float>, <8 x float>* %135, align 4
[DEBUG llvm_codegen.cpp:644]   %278 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.14 = insertelement <8 x float> poison, float %278, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.14 = shufflevector <8 x float> %.splatinsert.14, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %279 = fsub <8 x float> %277, %.splat.14
[DEBUG llvm_codegen.cpp:644]   %280 = tail call <8 x float> @Sleef_expf8(<8 x float> %279)
[DEBUG llvm_codegen.cpp:644]   %281 = fadd <8 x float> %276, %280
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %281, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %282 = load <8 x float>, <8 x float>* %143, align 4
[DEBUG llvm_codegen.cpp:644]   %283 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert.15 = insertelement <8 x float> poison, float %283, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat.15 = shufflevector <8 x float> %.splatinsert.15, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %284 = fsub <8 x float> %282, %.splat.15
[DEBUG llvm_codegen.cpp:644]   %285 = tail call <8 x float> @Sleef_expf8(<8 x float> %284)
[DEBUG llvm_codegen.cpp:644]   %286 = fadd <8 x float> %281, %285
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %286, <8 x float>* %206, align 4
[DEBUG llvm_codegen.cpp:644]   %287 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %288 = extractelement <8 x float> %286, i32 0
[DEBUG llvm_codegen.cpp:644]   %289 = fadd float %287, %288
[DEBUG llvm_codegen.cpp:644]   store float %289, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %290 = getelementptr float, float* %18, i64 %155
[DEBUG llvm_codegen.cpp:644]   %291 = load float, float* %290, align 4
[DEBUG llvm_codegen.cpp:644]   %292 = fadd float %289, %291
[DEBUG llvm_codegen.cpp:644]   store float %292, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %293 = getelementptr float, float* %18, i64 %162
[DEBUG llvm_codegen.cpp:644]   %294 = load float, float* %293, align 4
[DEBUG llvm_codegen.cpp:644]   %295 = fadd float %292, %294
[DEBUG llvm_codegen.cpp:644]   store float %295, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %296 = getelementptr float, float* %18, i64 %169
[DEBUG llvm_codegen.cpp:644]   %297 = load float, float* %296, align 4
[DEBUG llvm_codegen.cpp:644]   %298 = fadd float %295, %297
[DEBUG llvm_codegen.cpp:644]   store float %298, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %299 = getelementptr float, float* %18, i64 %176
[DEBUG llvm_codegen.cpp:644]   %300 = load float, float* %299, align 4
[DEBUG llvm_codegen.cpp:644]   %301 = fadd float %298, %300
[DEBUG llvm_codegen.cpp:644]   store float %301, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %302 = getelementptr float, float* %18, i64 %183
[DEBUG llvm_codegen.cpp:644]   %303 = load float, float* %302, align 4
[DEBUG llvm_codegen.cpp:644]   %304 = fadd float %301, %303
[DEBUG llvm_codegen.cpp:644]   store float %304, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %305 = getelementptr float, float* %18, i64 %190
[DEBUG llvm_codegen.cpp:644]   %306 = load float, float* %305, align 4
[DEBUG llvm_codegen.cpp:644]   %307 = fadd float %304, %306
[DEBUG llvm_codegen.cpp:644]   store float %307, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %308 = getelementptr float, float* %18, i64 %197
[DEBUG llvm_codegen.cpp:644]   %309 = load float, float* %308, align 4
[DEBUG llvm_codegen.cpp:644]   %310 = fadd float %307, %309
[DEBUG llvm_codegen.cpp:644]   store float %310, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %311 = load <8 x float>, <8 x float>* %25, align 4
[DEBUG llvm_codegen.cpp:644]   %312 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13 = insertelement <8 x float> poison, float %312, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14 = shufflevector <8 x float> %.splatinsert13, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %313 = fsub <8 x float> %311, %.splat14
[DEBUG llvm_codegen.cpp:644]   %314 = tail call <8 x float> @Sleef_expf8(<8 x float> %313)
[DEBUG llvm_codegen.cpp:644]   %315 = fdiv float 1.000000e+00, %310
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15 = insertelement <8 x float> poison, float %315, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16 = shufflevector <8 x float> %.splatinsert15, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %316 = fmul <8 x float> %314, %.splat16
[DEBUG llvm_codegen.cpp:644]   %317 = getelementptr float, float* %3, i64 %23
[DEBUG llvm_codegen.cpp:644]   %318 = bitcast float* %317 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %316, <8 x float>* %318, align 4
[DEBUG llvm_codegen.cpp:644]   %319 = load <8 x float>, <8 x float>* %31, align 4
[DEBUG llvm_codegen.cpp:644]   %320 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.1 = insertelement <8 x float> poison, float %320, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.1 = shufflevector <8 x float> %.splatinsert13.1, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %321 = fsub <8 x float> %319, %.splat14.1
[DEBUG llvm_codegen.cpp:644]   %322 = tail call <8 x float> @Sleef_expf8(<8 x float> %321)
[DEBUG llvm_codegen.cpp:644]   %323 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %324 = fdiv float 1.000000e+00, %323
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.1 = insertelement <8 x float> poison, float %324, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.1 = shufflevector <8 x float> %.splatinsert15.1, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %325 = fmul <8 x float> %322, %.splat16.1
[DEBUG llvm_codegen.cpp:644]   %326 = getelementptr float, float* %3, i64 %29
[DEBUG llvm_codegen.cpp:644]   %327 = bitcast float* %326 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %325, <8 x float>* %327, align 4
[DEBUG llvm_codegen.cpp:644]   %328 = load <8 x float>, <8 x float>* %39, align 4
[DEBUG llvm_codegen.cpp:644]   %329 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.2 = insertelement <8 x float> poison, float %329, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.2 = shufflevector <8 x float> %.splatinsert13.2, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %330 = fsub <8 x float> %328, %.splat14.2
[DEBUG llvm_codegen.cpp:644]   %331 = tail call <8 x float> @Sleef_expf8(<8 x float> %330)
[DEBUG llvm_codegen.cpp:644]   %332 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %333 = fdiv float 1.000000e+00, %332
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.2 = insertelement <8 x float> poison, float %333, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.2 = shufflevector <8 x float> %.splatinsert15.2, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %334 = fmul <8 x float> %331, %.splat16.2
[DEBUG llvm_codegen.cpp:644]   %335 = getelementptr float, float* %3, i64 %37
[DEBUG llvm_codegen.cpp:644]   %336 = bitcast float* %335 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %334, <8 x float>* %336, align 4
[DEBUG llvm_codegen.cpp:644]   %337 = load <8 x float>, <8 x float>* %47, align 4
[DEBUG llvm_codegen.cpp:644]   %338 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.3 = insertelement <8 x float> poison, float %338, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.3 = shufflevector <8 x float> %.splatinsert13.3, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %339 = fsub <8 x float> %337, %.splat14.3
[DEBUG llvm_codegen.cpp:644]   %340 = tail call <8 x float> @Sleef_expf8(<8 x float> %339)
[DEBUG llvm_codegen.cpp:644]   %341 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %342 = fdiv float 1.000000e+00, %341
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.3 = insertelement <8 x float> poison, float %342, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.3 = shufflevector <8 x float> %.splatinsert15.3, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %343 = fmul <8 x float> %340, %.splat16.3
[DEBUG llvm_codegen.cpp:644]   %344 = getelementptr float, float* %3, i64 %45
[DEBUG llvm_codegen.cpp:644]   %345 = bitcast float* %344 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %343, <8 x float>* %345, align 4
[DEBUG llvm_codegen.cpp:644]   %346 = load <8 x float>, <8 x float>* %55, align 4
[DEBUG llvm_codegen.cpp:644]   %347 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.4 = insertelement <8 x float> poison, float %347, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.4 = shufflevector <8 x float> %.splatinsert13.4, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %348 = fsub <8 x float> %346, %.splat14.4
[DEBUG llvm_codegen.cpp:644]   %349 = tail call <8 x float> @Sleef_expf8(<8 x float> %348)
[DEBUG llvm_codegen.cpp:644]   %350 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %351 = fdiv float 1.000000e+00, %350
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.4 = insertelement <8 x float> poison, float %351, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.4 = shufflevector <8 x float> %.splatinsert15.4, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %352 = fmul <8 x float> %349, %.splat16.4
[DEBUG llvm_codegen.cpp:644]   %353 = getelementptr float, float* %3, i64 %53
[DEBUG llvm_codegen.cpp:644]   %354 = bitcast float* %353 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %352, <8 x float>* %354, align 4
[DEBUG llvm_codegen.cpp:644]   %355 = load <8 x float>, <8 x float>* %63, align 4
[DEBUG llvm_codegen.cpp:644]   %356 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.5 = insertelement <8 x float> poison, float %356, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.5 = shufflevector <8 x float> %.splatinsert13.5, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %357 = fsub <8 x float> %355, %.splat14.5
[DEBUG llvm_codegen.cpp:644]   %358 = tail call <8 x float> @Sleef_expf8(<8 x float> %357)
[DEBUG llvm_codegen.cpp:644]   %359 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %360 = fdiv float 1.000000e+00, %359
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.5 = insertelement <8 x float> poison, float %360, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.5 = shufflevector <8 x float> %.splatinsert15.5, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %361 = fmul <8 x float> %358, %.splat16.5
[DEBUG llvm_codegen.cpp:644]   %362 = getelementptr float, float* %3, i64 %61
[DEBUG llvm_codegen.cpp:644]   %363 = bitcast float* %362 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %361, <8 x float>* %363, align 4
[DEBUG llvm_codegen.cpp:644]   %364 = load <8 x float>, <8 x float>* %71, align 4
[DEBUG llvm_codegen.cpp:644]   %365 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.6 = insertelement <8 x float> poison, float %365, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.6 = shufflevector <8 x float> %.splatinsert13.6, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %366 = fsub <8 x float> %364, %.splat14.6
[DEBUG llvm_codegen.cpp:644]   %367 = tail call <8 x float> @Sleef_expf8(<8 x float> %366)
[DEBUG llvm_codegen.cpp:644]   %368 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %369 = fdiv float 1.000000e+00, %368
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.6 = insertelement <8 x float> poison, float %369, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.6 = shufflevector <8 x float> %.splatinsert15.6, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %370 = fmul <8 x float> %367, %.splat16.6
[DEBUG llvm_codegen.cpp:644]   %371 = getelementptr float, float* %3, i64 %69
[DEBUG llvm_codegen.cpp:644]   %372 = bitcast float* %371 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %370, <8 x float>* %372, align 4
[DEBUG llvm_codegen.cpp:644]   %373 = load <8 x float>, <8 x float>* %79, align 4
[DEBUG llvm_codegen.cpp:644]   %374 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.7 = insertelement <8 x float> poison, float %374, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.7 = shufflevector <8 x float> %.splatinsert13.7, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %375 = fsub <8 x float> %373, %.splat14.7
[DEBUG llvm_codegen.cpp:644]   %376 = tail call <8 x float> @Sleef_expf8(<8 x float> %375)
[DEBUG llvm_codegen.cpp:644]   %377 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %378 = fdiv float 1.000000e+00, %377
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.7 = insertelement <8 x float> poison, float %378, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.7 = shufflevector <8 x float> %.splatinsert15.7, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %379 = fmul <8 x float> %376, %.splat16.7
[DEBUG llvm_codegen.cpp:644]   %380 = getelementptr float, float* %3, i64 %77
[DEBUG llvm_codegen.cpp:644]   %381 = bitcast float* %380 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %379, <8 x float>* %381, align 4
[DEBUG llvm_codegen.cpp:644]   %382 = load <8 x float>, <8 x float>* %87, align 4
[DEBUG llvm_codegen.cpp:644]   %383 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.8 = insertelement <8 x float> poison, float %383, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.8 = shufflevector <8 x float> %.splatinsert13.8, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %384 = fsub <8 x float> %382, %.splat14.8
[DEBUG llvm_codegen.cpp:644]   %385 = tail call <8 x float> @Sleef_expf8(<8 x float> %384)
[DEBUG llvm_codegen.cpp:644]   %386 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %387 = fdiv float 1.000000e+00, %386
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.8 = insertelement <8 x float> poison, float %387, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.8 = shufflevector <8 x float> %.splatinsert15.8, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %388 = fmul <8 x float> %385, %.splat16.8
[DEBUG llvm_codegen.cpp:644]   %389 = getelementptr float, float* %3, i64 %85
[DEBUG llvm_codegen.cpp:644]   %390 = bitcast float* %389 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %388, <8 x float>* %390, align 4
[DEBUG llvm_codegen.cpp:644]   %391 = load <8 x float>, <8 x float>* %95, align 4
[DEBUG llvm_codegen.cpp:644]   %392 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.9 = insertelement <8 x float> poison, float %392, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.9 = shufflevector <8 x float> %.splatinsert13.9, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %393 = fsub <8 x float> %391, %.splat14.9
[DEBUG llvm_codegen.cpp:644]   %394 = tail call <8 x float> @Sleef_expf8(<8 x float> %393)
[DEBUG llvm_codegen.cpp:644]   %395 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %396 = fdiv float 1.000000e+00, %395
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.9 = insertelement <8 x float> poison, float %396, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.9 = shufflevector <8 x float> %.splatinsert15.9, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %397 = fmul <8 x float> %394, %.splat16.9
[DEBUG llvm_codegen.cpp:644]   %398 = getelementptr float, float* %3, i64 %93
[DEBUG llvm_codegen.cpp:644]   %399 = bitcast float* %398 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %397, <8 x float>* %399, align 4
[DEBUG llvm_codegen.cpp:644]   %400 = load <8 x float>, <8 x float>* %103, align 4
[DEBUG llvm_codegen.cpp:644]   %401 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.10 = insertelement <8 x float> poison, float %401, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.10 = shufflevector <8 x float> %.splatinsert13.10, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %402 = fsub <8 x float> %400, %.splat14.10
[DEBUG llvm_codegen.cpp:644]   %403 = tail call <8 x float> @Sleef_expf8(<8 x float> %402)
[DEBUG llvm_codegen.cpp:644]   %404 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %405 = fdiv float 1.000000e+00, %404
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.10 = insertelement <8 x float> poison, float %405, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.10 = shufflevector <8 x float> %.splatinsert15.10, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %406 = fmul <8 x float> %403, %.splat16.10
[DEBUG llvm_codegen.cpp:644]   %407 = getelementptr float, float* %3, i64 %101
[DEBUG llvm_codegen.cpp:644]   %408 = bitcast float* %407 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %406, <8 x float>* %408, align 4
[DEBUG llvm_codegen.cpp:644]   %409 = load <8 x float>, <8 x float>* %111, align 4
[DEBUG llvm_codegen.cpp:644]   %410 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.11 = insertelement <8 x float> poison, float %410, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.11 = shufflevector <8 x float> %.splatinsert13.11, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %411 = fsub <8 x float> %409, %.splat14.11
[DEBUG llvm_codegen.cpp:644]   %412 = tail call <8 x float> @Sleef_expf8(<8 x float> %411)
[DEBUG llvm_codegen.cpp:644]   %413 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %414 = fdiv float 1.000000e+00, %413
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.11 = insertelement <8 x float> poison, float %414, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.11 = shufflevector <8 x float> %.splatinsert15.11, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %415 = fmul <8 x float> %412, %.splat16.11
[DEBUG llvm_codegen.cpp:644]   %416 = getelementptr float, float* %3, i64 %109
[DEBUG llvm_codegen.cpp:644]   %417 = bitcast float* %416 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %415, <8 x float>* %417, align 4
[DEBUG llvm_codegen.cpp:644]   %418 = load <8 x float>, <8 x float>* %119, align 4
[DEBUG llvm_codegen.cpp:644]   %419 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.12 = insertelement <8 x float> poison, float %419, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.12 = shufflevector <8 x float> %.splatinsert13.12, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %420 = fsub <8 x float> %418, %.splat14.12
[DEBUG llvm_codegen.cpp:644]   %421 = tail call <8 x float> @Sleef_expf8(<8 x float> %420)
[DEBUG llvm_codegen.cpp:644]   %422 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %423 = fdiv float 1.000000e+00, %422
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.12 = insertelement <8 x float> poison, float %423, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.12 = shufflevector <8 x float> %.splatinsert15.12, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %424 = fmul <8 x float> %421, %.splat16.12
[DEBUG llvm_codegen.cpp:644]   %425 = getelementptr float, float* %3, i64 %117
[DEBUG llvm_codegen.cpp:644]   %426 = bitcast float* %425 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %424, <8 x float>* %426, align 4
[DEBUG llvm_codegen.cpp:644]   %427 = load <8 x float>, <8 x float>* %127, align 4
[DEBUG llvm_codegen.cpp:644]   %428 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.13 = insertelement <8 x float> poison, float %428, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.13 = shufflevector <8 x float> %.splatinsert13.13, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %429 = fsub <8 x float> %427, %.splat14.13
[DEBUG llvm_codegen.cpp:644]   %430 = tail call <8 x float> @Sleef_expf8(<8 x float> %429)
[DEBUG llvm_codegen.cpp:644]   %431 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %432 = fdiv float 1.000000e+00, %431
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.13 = insertelement <8 x float> poison, float %432, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.13 = shufflevector <8 x float> %.splatinsert15.13, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %433 = fmul <8 x float> %430, %.splat16.13
[DEBUG llvm_codegen.cpp:644]   %434 = getelementptr float, float* %3, i64 %125
[DEBUG llvm_codegen.cpp:644]   %435 = bitcast float* %434 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %433, <8 x float>* %435, align 4
[DEBUG llvm_codegen.cpp:644]   %436 = load <8 x float>, <8 x float>* %135, align 4
[DEBUG llvm_codegen.cpp:644]   %437 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.14 = insertelement <8 x float> poison, float %437, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.14 = shufflevector <8 x float> %.splatinsert13.14, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %438 = fsub <8 x float> %436, %.splat14.14
[DEBUG llvm_codegen.cpp:644]   %439 = tail call <8 x float> @Sleef_expf8(<8 x float> %438)
[DEBUG llvm_codegen.cpp:644]   %440 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %441 = fdiv float 1.000000e+00, %440
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.14 = insertelement <8 x float> poison, float %441, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.14 = shufflevector <8 x float> %.splatinsert15.14, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %442 = fmul <8 x float> %439, %.splat16.14
[DEBUG llvm_codegen.cpp:644]   %443 = getelementptr float, float* %3, i64 %133
[DEBUG llvm_codegen.cpp:644]   %444 = bitcast float* %443 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %442, <8 x float>* %444, align 4
[DEBUG llvm_codegen.cpp:644]   %445 = load <8 x float>, <8 x float>* %143, align 4
[DEBUG llvm_codegen.cpp:644]   %446 = load float, float* %19, align 4
[DEBUG llvm_codegen.cpp:644]   %.splatinsert13.15 = insertelement <8 x float> poison, float %446, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat14.15 = shufflevector <8 x float> %.splatinsert13.15, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %447 = fsub <8 x float> %445, %.splat14.15
[DEBUG llvm_codegen.cpp:644]   %448 = tail call <8 x float> @Sleef_expf8(<8 x float> %447)
[DEBUG llvm_codegen.cpp:644]   %449 = load float, float* %204, align 4
[DEBUG llvm_codegen.cpp:644]   %450 = fdiv float 1.000000e+00, %449
[DEBUG llvm_codegen.cpp:644]   %.splatinsert15.15 = insertelement <8 x float> poison, float %450, i32 0
[DEBUG llvm_codegen.cpp:644]   %.splat16.15 = shufflevector <8 x float> %.splatinsert15.15, <8 x float> poison, <8 x i32> zeroinitializer
[DEBUG llvm_codegen.cpp:644]   %451 = fmul <8 x float> %448, %.splat16.15
[DEBUG llvm_codegen.cpp:644]   %452 = getelementptr float, float* %3, i64 %141
[DEBUG llvm_codegen.cpp:644]   %453 = bitcast float* %452 to <8 x float>*
[DEBUG llvm_codegen.cpp:644]   store <8 x float> %451, <8 x float>* %453, align 4
[DEBUG llvm_codegen.cpp:644]   ret void
[DEBUG llvm_codegen.cpp:644] }
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] ; Function Attrs: mustprogress nofree nosync nounwind readnone willreturn
[DEBUG llvm_codegen.cpp:644] declare <8 x float> @Sleef_expf8(<8 x float>) local_unnamed_addr #3
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] ; Function Attrs: nounwind
[DEBUG llvm_codegen.cpp:644] declare void @DispatchParallel(i8*, i64, i64, i8*) local_unnamed_addr #0
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] ; Function Attrs: inaccessiblemem_or_argmemonly mustprogress nounwind willreturn
[DEBUG llvm_codegen.cpp:644] declare void @free(i8* nocapture noundef) local_unnamed_addr #4
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] ; Function Attrs: nounwind
[DEBUG llvm_codegen.cpp:644] declare void @nnc_aten_free(i64, i8**) local_unnamed_addr #0
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] ; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
[DEBUG llvm_codegen.cpp:644] declare void @llvm.experimental.noalias.scope.decl(metadata) #5
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] ; Function Attrs: argmemonly nofree nosync nounwind willreturn
[DEBUG llvm_codegen.cpp:644] declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] ; Function Attrs: argmemonly nofree nosync nounwind willreturn
[DEBUG llvm_codegen.cpp:644] declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] attributes #0 = { nounwind }
[DEBUG llvm_codegen.cpp:644] attributes #1 = { inaccessiblememonly mustprogress nofree nounwind willreturn }
[DEBUG llvm_codegen.cpp:644] attributes #2 = { nofree nosync nounwind }
[DEBUG llvm_codegen.cpp:644] attributes #3 = { mustprogress nofree nosync nounwind readnone willreturn }
[DEBUG llvm_codegen.cpp:644] attributes #4 = { inaccessiblemem_or_argmemonly mustprogress nounwind willreturn }
[DEBUG llvm_codegen.cpp:644] attributes #5 = { inaccessiblememonly nofree nosync nounwind willreturn }
[DEBUG llvm_codegen.cpp:644] attributes #6 = { argmemonly nofree nosync nounwind willreturn }
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:644] !0 = !{!1}
[DEBUG llvm_codegen.cpp:644] !1 = distinct !{!1, !2, !"pytorch: argument 0"}
[DEBUG llvm_codegen.cpp:644] !2 = distinct !{!2, !"pytorch"}
[DEBUG llvm_codegen.cpp:644] !3 = !{!4}
[DEBUG llvm_codegen.cpp:644] !4 = distinct !{!4, !2, !"pytorch: argument 1"}
[DEBUG llvm_codegen.cpp:644] !5 = !{!1, !4}
[DEBUG llvm_codegen.cpp:644] 
[DEBUG llvm_codegen.cpp:662] 
[DEBUG llvm_codegen.cpp:662] LLVM generated assembly code
[DEBUG llvm_codegen.cpp:662] 
[DEBUG llvm_codegen.cpp:662] 	.text
[DEBUG llvm_codegen.cpp:662] 	.file	"pytorch"
[DEBUG llvm_codegen.cpp:662] 	.globl	fused_softmax
[DEBUG llvm_codegen.cpp:662] 	.p2align	4, 0x90
[DEBUG llvm_codegen.cpp:662] 	.type	fused_softmax,@function
[DEBUG llvm_codegen.cpp:662] fused_softmax:
[DEBUG llvm_codegen.cpp:662] 	endbr64
[DEBUG llvm_codegen.cpp:662] 	pushq	%rbp
[DEBUG llvm_codegen.cpp:662] 	pushq	%r15
[DEBUG llvm_codegen.cpp:662] 	pushq	%r14
[DEBUG llvm_codegen.cpp:662] 	pushq	%r13
[DEBUG llvm_codegen.cpp:662] 	pushq	%r12
[DEBUG llvm_codegen.cpp:662] 	pushq	%rbx
[DEBUG llvm_codegen.cpp:662] 	subq	$56, %rsp
[DEBUG llvm_codegen.cpp:662] 	movq	(%rdi), %r13
[DEBUG llvm_codegen.cpp:662] 	movq	8(%rdi), %rbp
[DEBUG llvm_codegen.cpp:662] 	movabsq	$malloc, %rbx
[DEBUG llvm_codegen.cpp:662] 	movl	$524288, %edi
[DEBUG llvm_codegen.cpp:662] 	callq	*%rbx
[DEBUG llvm_codegen.cpp:662] 	movq	%rax, %r14
[DEBUG llvm_codegen.cpp:662] 	movl	$65536, %edi
[DEBUG llvm_codegen.cpp:662] 	callq	*%rbx
[DEBUG llvm_codegen.cpp:662] 	movq	%rax, %r15
[DEBUG llvm_codegen.cpp:662] 	movl	$65536, %edi
[DEBUG llvm_codegen.cpp:662] 	callq	*%rbx
[DEBUG llvm_codegen.cpp:662] 	movq	%rax, %r12
[DEBUG llvm_codegen.cpp:662] 	movl	$524288, %edi
[DEBUG llvm_codegen.cpp:662] 	callq	*%rbx
[DEBUG llvm_codegen.cpp:662] 	movq	%rax, %rbx
[DEBUG llvm_codegen.cpp:662] 	movq	%rbp, 8(%rsp)
[DEBUG llvm_codegen.cpp:662] 	movq	%rax, 16(%rsp)
[DEBUG llvm_codegen.cpp:662] 	movq	%r12, 24(%rsp)
[DEBUG llvm_codegen.cpp:662] 	movq	%r15, 32(%rsp)
[DEBUG llvm_codegen.cpp:662] 	movq	%r13, 40(%rsp)
[DEBUG llvm_codegen.cpp:662] 	movq	%r14, 48(%rsp)
[DEBUG llvm_codegen.cpp:662] 	movabsq	$.Lfunc, %rdi
[DEBUG llvm_codegen.cpp:662] 	movabsq	$DispatchParallel, %rax
[DEBUG llvm_codegen.cpp:662] 	leaq	8(%rsp), %rcx
[DEBUG llvm_codegen.cpp:662] 	movl	$16384, %edx
[DEBUG llvm_codegen.cpp:662] 	xorl	%esi, %esi
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	movabsq	$free, %rbp
[DEBUG llvm_codegen.cpp:662] 	movq	%rbx, %rdi
[DEBUG llvm_codegen.cpp:662] 	callq	*%rbp
[DEBUG llvm_codegen.cpp:662] 	movq	%r12, %rdi
[DEBUG llvm_codegen.cpp:662] 	callq	*%rbp
[DEBUG llvm_codegen.cpp:662] 	movq	%r15, %rdi
[DEBUG llvm_codegen.cpp:662] 	callq	*%rbp
[DEBUG llvm_codegen.cpp:662] 	movq	%r14, %rdi
[DEBUG llvm_codegen.cpp:662] 	callq	*%rbp
[DEBUG llvm_codegen.cpp:662] 	movabsq	$nnc_aten_free, %rax
[DEBUG llvm_codegen.cpp:662] 	movq	%rsp, %rsi
[DEBUG llvm_codegen.cpp:662] 	xorl	%edi, %edi
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	xorl	%eax, %eax
[DEBUG llvm_codegen.cpp:662] 	addq	$56, %rsp
[DEBUG llvm_codegen.cpp:662] 	popq	%rbx
[DEBUG llvm_codegen.cpp:662] 	popq	%r12
[DEBUG llvm_codegen.cpp:662] 	popq	%r13
[DEBUG llvm_codegen.cpp:662] 	popq	%r14
[DEBUG llvm_codegen.cpp:662] 	popq	%r15
[DEBUG llvm_codegen.cpp:662] 	popq	%rbp
[DEBUG llvm_codegen.cpp:662] 	retq
[DEBUG llvm_codegen.cpp:662] .Lfunc_end0:
[DEBUG llvm_codegen.cpp:662] 	.size	fused_softmax, .Lfunc_end0-fused_softmax
[DEBUG llvm_codegen.cpp:662] 
[DEBUG llvm_codegen.cpp:662] 	.section	.rodata.cst4,"aM",@progbits,4
[DEBUG llvm_codegen.cpp:662] 	.p2align	2
[DEBUG llvm_codegen.cpp:662] .LCPI1_0:
[DEBUG llvm_codegen.cpp:662] 	.long	0x00800000
[DEBUG llvm_codegen.cpp:662] .LCPI1_1:
[DEBUG llvm_codegen.cpp:662] 	.long	0x3f800000
[DEBUG llvm_codegen.cpp:662] 	.text
[DEBUG llvm_codegen.cpp:662] 	.p2align	4, 0x90
[DEBUG llvm_codegen.cpp:662] 	.type	.Lfunc,@function
[DEBUG llvm_codegen.cpp:662] .Lfunc:
[DEBUG llvm_codegen.cpp:662] 	endbr64
[DEBUG llvm_codegen.cpp:662] 	pushq	%rbp
[DEBUG llvm_codegen.cpp:662] 	pushq	%r15
[DEBUG llvm_codegen.cpp:662] 	pushq	%r14
[DEBUG llvm_codegen.cpp:662] 	pushq	%r13
[DEBUG llvm_codegen.cpp:662] 	pushq	%r12
[DEBUG llvm_codegen.cpp:662] 	pushq	%rbx
[DEBUG llvm_codegen.cpp:662] 	subq	$56, %rsp
[DEBUG llvm_codegen.cpp:662] 	movq	%rdi, %r13
[DEBUG llvm_codegen.cpp:662] 	movq	(%rsi), %rax
[DEBUG llvm_codegen.cpp:662] 	movq	%rax, 48(%rsp)
[DEBUG llvm_codegen.cpp:662] 	movq	8(%rsi), %rax
[DEBUG llvm_codegen.cpp:662] 	movq	16(%rsi), %r12
[DEBUG llvm_codegen.cpp:662] 	movq	24(%rsi), %rdx
[DEBUG llvm_codegen.cpp:662] 	movq	%rdx, 40(%rsp)
[DEBUG llvm_codegen.cpp:662] 	movq	32(%rsi), %rbp
[DEBUG llvm_codegen.cpp:662] 	movq	40(%rsi), %r14
[DEBUG llvm_codegen.cpp:662] 	movl	$8388608, (%r12,%rdi,4)
[DEBUG llvm_codegen.cpp:662] 	movq	%rdi, %rbx
[DEBUG llvm_codegen.cpp:662] 	movabsq	$.LCPI1_0, %rcx
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	(%rcx), %ymm0
[DEBUG llvm_codegen.cpp:662] 	shlq	$5, %rbx
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	movq	%rdi, %r15
[DEBUG llvm_codegen.cpp:662] 	shlq	$9, %r15
[DEBUG llvm_codegen.cpp:662] 	vmaxps	(%rbp,%r15), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	32(%rbp,%r15), %ymm1
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm0, %ymm1, %k0
[DEBUG llvm_codegen.cpp:662] 	vxorps	%xmm2, %xmm2, %xmm2
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm0, %k1
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm0, %ymm1 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm1, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	64(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm1, %ymm0, %k0
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm1, %k1
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm1, %ymm0 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	96(%rbp,%r15), %ymm1
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm0, %ymm1, %k0
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm0, %k1
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm0, %ymm1 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm1, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	128(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm1, %ymm0, %k0
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm1, %k1
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm1, %ymm0 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	160(%rbp,%r15), %ymm1
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm0, %ymm1, %k0
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm0, %k1
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm0, %ymm1 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm1, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	192(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm1, %ymm0, %k0
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm1, %k1
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm1, %ymm0 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	224(%rbp,%r15), %ymm1
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm0, %ymm1, %k0
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm0, %k1
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm0, %ymm1 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm1, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	256(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm1, %ymm0, %k0
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm1, %k1
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm1, %ymm0 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	288(%rbp,%r15), %ymm1
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm0, %ymm1, %k0
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm0, %k1
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm0, %ymm1 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm1, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	320(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm1, %ymm0, %k0
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm1, %k1
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm1, %ymm0 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	352(%rbp,%r15), %ymm1
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm0, %ymm1, %k0
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm0, %k1
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm0, %ymm1 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm1, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	384(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm1, %ymm0, %k0
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm1, %k1
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm1, %ymm0 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	416(%rbp,%r15), %ymm1
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm0, %ymm1, %k0
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm0, %k1
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm0, %ymm1 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm1, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	448(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm1, %ymm0, %k0
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm1, %k1
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm1, %ymm0 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	480(%rbp,%r15), %ymm1
[DEBUG llvm_codegen.cpp:662] 	vcmpltps	%ymm0, %ymm1, %k0
[DEBUG llvm_codegen.cpp:662] 	vcmpunordps	%ymm2, %ymm0, %k1
[DEBUG llvm_codegen.cpp:662] 	vxorps	%xmm2, %xmm2, %xmm2
[DEBUG llvm_codegen.cpp:662] 	korb	%k0, %k1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovaps	%ymm0, %ymm1 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm1, (%rax,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%r12,%rdi,4), %xmm0
[DEBUG llvm_codegen.cpp:662] 	vmaxss	%xmm1, %xmm0, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vcmpunordss	%xmm0, %xmm0, %k1
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, %xmm1, %xmm1 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm1, (%r12,%rdi,4)
[DEBUG llvm_codegen.cpp:662] 	vcmpunordss	%xmm1, %xmm1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmaxss	4(%rax,%rbx), %xmm1, %xmm0
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm1, %xmm0, %xmm0 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, (%r12,%rdi,4)
[DEBUG llvm_codegen.cpp:662] 	vcmpunordss	%xmm0, %xmm0, %k1
[DEBUG llvm_codegen.cpp:662] 	vmaxss	8(%rax,%rbx), %xmm0, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, %xmm1, %xmm1 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm1, (%r12,%rdi,4)
[DEBUG llvm_codegen.cpp:662] 	vcmpunordss	%xmm1, %xmm1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmaxss	12(%rax,%rbx), %xmm1, %xmm0
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm1, %xmm0, %xmm0 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, (%r12,%rdi,4)
[DEBUG llvm_codegen.cpp:662] 	vcmpunordss	%xmm0, %xmm0, %k1
[DEBUG llvm_codegen.cpp:662] 	vmaxss	16(%rax,%rbx), %xmm0, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, %xmm1, %xmm1 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm1, (%r12,%rdi,4)
[DEBUG llvm_codegen.cpp:662] 	vcmpunordss	%xmm1, %xmm1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmaxss	20(%rax,%rbx), %xmm1, %xmm0
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm1, %xmm0, %xmm0 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, (%r12,%rdi,4)
[DEBUG llvm_codegen.cpp:662] 	vcmpunordss	%xmm0, %xmm0, %k1
[DEBUG llvm_codegen.cpp:662] 	vmaxss	24(%rax,%rbx), %xmm0, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, %xmm1, %xmm1 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm1, (%r12,%rdi,4)
[DEBUG llvm_codegen.cpp:662] 	vcmpunordss	%xmm1, %xmm1, %k1
[DEBUG llvm_codegen.cpp:662] 	vmaxss	28(%rax,%rbx), %xmm1, %xmm0
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm1, %xmm0, %xmm0 {%k1}
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, (%r12,%rdi,4)
[DEBUG llvm_codegen.cpp:662] 	movl	$0, (%rdx,%rdi,4)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm2, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%rdi,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vxorps	%xmm1, %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vaddps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	32(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	64(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	96(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	128(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	160(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	192(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	224(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	256(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	288(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	320(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	352(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	384(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	416(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	448(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	vmovups	480(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rcx
[DEBUG llvm_codegen.cpp:662] 	vaddps	(%rsp), %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%r14,%rbx)
[DEBUG llvm_codegen.cpp:662] 	movq	40(%rsp), %rax
[DEBUG llvm_codegen.cpp:662] 	vaddss	(%rax,%r13,4), %xmm0, %xmm0
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, (%rax,%r13,4)
[DEBUG llvm_codegen.cpp:662] 	vaddss	4(%r14,%rbx), %xmm0, %xmm0
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, (%rax,%r13,4)
[DEBUG llvm_codegen.cpp:662] 	vaddss	8(%r14,%rbx), %xmm0, %xmm0
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, (%rax,%r13,4)
[DEBUG llvm_codegen.cpp:662] 	vaddss	12(%r14,%rbx), %xmm0, %xmm0
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, (%rax,%r13,4)
[DEBUG llvm_codegen.cpp:662] 	vaddss	16(%r14,%rbx), %xmm0, %xmm0
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, (%rax,%r13,4)
[DEBUG llvm_codegen.cpp:662] 	vaddss	20(%r14,%rbx), %xmm0, %xmm0
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, (%rax,%r13,4)
[DEBUG llvm_codegen.cpp:662] 	vaddss	24(%r14,%rbx), %xmm0, %xmm0
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, (%rax,%r13,4)
[DEBUG llvm_codegen.cpp:662] 	vaddss	28(%r14,%rbx), %xmm0, %xmm0
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, 36(%rsp)
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm0, (%rax,%r13,4)
[DEBUG llvm_codegen.cpp:662] 	movq	%rax, %r14
[DEBUG llvm_codegen.cpp:662] 	vmovups	(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	callq	*%rcx
[DEBUG llvm_codegen.cpp:662] 	movabsq	$.LCPI1_1, %rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rax), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vmovss	%xmm1, (%rsp)
[DEBUG llvm_codegen.cpp:662] 	vdivss	36(%rsp), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movq	48(%rsp), %rbx
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, (%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	32(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 32(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	64(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 64(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	96(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 96(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	128(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 128(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	160(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 160(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	192(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 192(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	224(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 224(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	256(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 256(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	288(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 288(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	320(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 320(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	352(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 352(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	384(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 384(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	416(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 416(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	448(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 448(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	vmovups	480(%rbp,%r15), %ymm0
[DEBUG llvm_codegen.cpp:662] 	vsubps	(%r12,%r13,4){1to8}, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	movabsq	$Sleef_expf8, %rax
[DEBUG llvm_codegen.cpp:662] 	callq	*%rax
[DEBUG llvm_codegen.cpp:662] 	vmovss	(%rsp), %xmm1
[DEBUG llvm_codegen.cpp:662] 	vdivss	(%r14,%r13,4), %xmm1, %xmm1
[DEBUG llvm_codegen.cpp:662] 	vbroadcastss	%xmm1, %ymm1
[DEBUG llvm_codegen.cpp:662] 	vmulps	%ymm1, %ymm0, %ymm0
[DEBUG llvm_codegen.cpp:662] 	vmovups	%ymm0, 480(%rbx,%r15)
[DEBUG llvm_codegen.cpp:662] 	addq	$56, %rsp
[DEBUG llvm_codegen.cpp:662] 	popq	%rbx
[DEBUG llvm_codegen.cpp:662] 	popq	%r12
[DEBUG llvm_codegen.cpp:662] 	popq	%r13
[DEBUG llvm_codegen.cpp:662] 	popq	%r14
[DEBUG llvm_codegen.cpp:662] 	popq	%r15
[DEBUG llvm_codegen.cpp:662] 	popq	%rbp
[DEBUG llvm_codegen.cpp:662] 	vzeroupper
[DEBUG llvm_codegen.cpp:662] 	retq
[DEBUG llvm_codegen.cpp:662] .Lfunc_end1:
[DEBUG llvm_codegen.cpp:662] 	.size	.Lfunc, .Lfunc_end1-.Lfunc
[DEBUG llvm_codegen.cpp:662] 
[DEBUG llvm_codegen.cpp:662] 	.section	".note.GNU-stack","",@progbits
[DEBUG llvm_codegen.cpp:662] 
.
----------------------------------------------------------------------
Ran 1 test in 0.958s

OK
