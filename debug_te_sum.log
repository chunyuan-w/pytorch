tensor([[-0.1117, -0.4966,  0.1631, -0.8817,  0.0539,  0.6684, -0.0597, -0.4675],
        [ 0.6369, -0.7141, -1.0831, -0.5547,  0.9717, -0.5150,  1.4255,  0.7987],
        [-2.5273,  1.4778, -0.1696, -0.9919, -1.4569,  0.2563, -0.4030,  0.4195]])
[DUMP kernel.cpp:1584] TensorExprKernel graph (Before graph optimization):
[DUMP kernel.cpp:1584] graph(%x : Float(3, 8, strides=[8, 1], requires_grad=0, device=cpu)):
[DUMP kernel.cpp:1584]   %1 : NoneType = prim::Constant()
[DUMP kernel.cpp:1584]   %2 : bool = prim::Constant[value=0]()
[DUMP kernel.cpp:1584]   %3 : int[] = prim::Constant[value=[-1]]()
[DUMP kernel.cpp:1584]   %4 : Float(3, strides=[1], requires_grad=0, device=cpu) = aten::sum(%x, %3, %2, %1) # test/test_te_softmax.py:64:0
[DUMP kernel.cpp:1584]   return (%4)
[DUMP kernel.cpp:1612] TensorExprKernel graph (After graph optimization):
[DUMP kernel.cpp:1612] graph(%x : Float(3, 8, strides=[8, 1], requires_grad=0, device=cpu)):
[DUMP kernel.cpp:1612]   %1 : NoneType = prim::Constant()
[DUMP kernel.cpp:1612]   %2 : bool = prim::Constant[value=0]()
[DUMP kernel.cpp:1612]   %3 : int[] = prim::Constant[value=[-1]]()
[DUMP kernel.cpp:1612]   %4 : Float(3, strides=[1], requires_grad=0, device=cpu) = aten::sum(%x, %3, %2, %1) # test/test_te_softmax.py:64:0
[DUMP kernel.cpp:1612]   return (%4)
[DUMP kernel.cpp:1616] TensorExprKernel graph:
[DUMP kernel.cpp:1616] graph(%x : Float(3, 8, strides=[8, 1], requires_grad=0, device=cpu)):
[DUMP kernel.cpp:1616]   %1 : NoneType = prim::Constant()
[DUMP kernel.cpp:1616]   %2 : bool = prim::Constant[value=0]()
[DUMP kernel.cpp:1616]   %3 : int[] = prim::Constant[value=[-1]]()
[DUMP kernel.cpp:1616]   %4 : Float(3, strides=[1], requires_grad=0, device=cpu) = aten::sum(%x, %3, %2, %1) # test/test_te_softmax.py:64:0
[DUMP kernel.cpp:1616]   return (%4)
[DEBUG kernel.cpp:710] Original Stmt:
[DEBUG kernel.cpp:710] {
[DEBUG kernel.cpp:710]   for (int64_t i = 0ll; i < 3ll; i++) {
[DEBUG kernel.cpp:710]     sum[i] = float(0);
[DEBUG kernel.cpp:710]     for (int64_t j = 0ll; j < 8ll; j++) {
[DEBUG kernel.cpp:710]       sum[i] = ReduceOp((sum[i]) + float(tx[i, j]), reduce_args={j});
[DEBUG kernel.cpp:710]     }
[DEBUG kernel.cpp:710]   }
[DEBUG kernel.cpp:710] }
[DEBUG kernel.cpp:732] after simplify{
[DEBUG kernel.cpp:732]   for (int64_t i = 0ll; i < 3ll; i++) {
[DEBUG kernel.cpp:732]     sum[i] = 0.f;
[DEBUG kernel.cpp:732]     for (int64_t j = 0ll; j < 8ll; j++) {
[DEBUG kernel.cpp:732]       sum[i] = ReduceOp((sum[i]) + (tx[i, j]), reduce_args={j});
[DEBUG kernel.cpp:732]     }
[DEBUG kernel.cpp:732]   }
[DEBUG kernel.cpp:732] }
[DEBUG kernel.cpp:742] after inline{
[DEBUG kernel.cpp:742]   for (int64_t i = 0ll; i < 3ll; i++) {
[DEBUG kernel.cpp:742]     sum[i] = 0.f;
[DEBUG kernel.cpp:742]     for (int64_t j = 0ll; j < 8ll; j++) {
[DEBUG kernel.cpp:742]       sum[i] = ReduceOp((sum[i]) + (tx[i, j]), reduce_args={j});
[DEBUG kernel.cpp:742]     }
[DEBUG kernel.cpp:742]   }
[DEBUG kernel.cpp:742] }
[DEBUG kernel.cpp:758] after fuse{
[DEBUG kernel.cpp:758]   for (int64_t i = 0ll; i < 3ll; i++) {
[DEBUG kernel.cpp:758]     sum[i] = 0.f;
[DEBUG kernel.cpp:758]     for (int64_t j = 0ll; j < 8ll; j++) {
[DEBUG kernel.cpp:758]       sum[i] = ReduceOp((sum[i]) + (tx[i, j]), reduce_args={j});
[DEBUG kernel.cpp:758]     }
[DEBUG kernel.cpp:758]   }
[DEBUG kernel.cpp:758] }
[DEBUG kernel.cpp:760] after parallelize{
[DEBUG kernel.cpp:760]   for (int64_t i = 0ll; i < 3ll; i++) {
[DEBUG kernel.cpp:760]     sum[i] = 0.f;
[DEBUG kernel.cpp:760]     for (int64_t j = 0ll; j < 8ll; j++) {
[DEBUG kernel.cpp:760]       sum[i] = ReduceOp((sum[i]) + (tx[i, j]), reduce_args={j});
[DEBUG kernel.cpp:760]     }
[DEBUG kernel.cpp:760]   }
[DEBUG kernel.cpp:760] }
[DEBUG kernel.cpp:845] after prepareForCodegen{
[DEBUG kernel.cpp:845]   for (int64_t i = 0ll; i < 3ll; i++) {
[DEBUG kernel.cpp:845]     sum[i] = 0.f;
[DEBUG kernel.cpp:845]     for (int64_t j = 0ll; j < 8ll; j++) {
[DEBUG kernel.cpp:845]       sum[i] = (sum[i]) + (tx[(0ll + i * 8ll) + j * 1ll]);
[DEBUG kernel.cpp:845]     }
[DEBUG kernel.cpp:845]   }
[DEBUG kernel.cpp:845] }
[DEBUG kernel.cpp:847] after simplification{
[DEBUG kernel.cpp:847]   for (int64_t i = 0ll; i < 3ll; i++) {
[DEBUG kernel.cpp:847]     sum[i] = 0.f;
[DEBUG kernel.cpp:847]     for (int64_t j = 0ll; j < 8ll; j++) {
[DEBUG kernel.cpp:847]       sum[i] = (sum[i]) + (tx[j + 8ll * i]);
[DEBUG kernel.cpp:847]     }
[DEBUG kernel.cpp:847]   }
[DEBUG kernel.cpp:847] }
len: 1
orig f: 
for (int64_t i = 0ll; i < 3ll; i++) {
  sum[i] = 0.f;
  for (int64_t j = 0ll; j < 8ll; j++) {
    sum[i] = (sum[i]) + (tx[j + 8ll * i]);
  }
}
before normalize: 
for (int64_t i = 0ll; i < 3ll; i++) {
  sum[i] = 0.f;
  for (int64_t j = 0ll; j < 8ll; j++) {
    sum[i] = (sum[i]) + (tx[j + 8ll * i]);
  }
}
before flatten: 
for (int64_t i = 0ll; i < 3ll; i++) {
  sum[i] = 0.f;
  for (int64_t j = 0ll; j < 8ll; j++) {
    sum[i] = (sum[i]) + (tx[j + 8ll * i]);
  }
}
before vec: 
for (int64_t i = 0ll; i < 3ll; i++) {
  sum[i] = 0.f;
  for (int64_t j = 0ll; j < 8ll; j++) {
    sum[i] = (sum[i]) + (tx[j + 8ll * i]);
  }
}
loop start_: 0
loop lanes_: 3
stmt in Block before mutate: 
sum[i] = 0.f;
old_in: 
i
stride value: 1
stride value cstr: 1
new_in: 
Ramp(0ll, 1ll, 3)
old_in: 
0.f
new_in: 
0.f
insert broadcasts for 0
no broadcast make
insert broadcasts for 1
broadcast make
lanes: 3
stmt in Block after mutate: 
sum[Ramp(0ll, 1ll, 3)] = Broadcast(0.f, 3);
stmt in Block before mutate: 
for (int64_t j = 0ll; j < 8ll; j++) {
  sum[i] = (sum[i]) + (tx[j + 8ll * i]);
}
body in For before mutate: 
{
  sum[i] = (sum[i]) + (tx[j + 8ll * i]);
}
stmt in Block before mutate: 
sum[i] = (sum[i]) + (tx[j + 8ll * i]);
old_in: 
i
stride value: 1
stride value cstr: 1
new_in: 
Ramp(0ll, 1ll, 3)
old_in: 
(sum[i]) + (tx[j + 8ll * i])
old_in: 
sum[i]
old_in: 
i
stride value: 1
stride value cstr: 1
new_in: 
Ramp(0ll, 1ll, 3)
insert broadcasts for 0
no broadcast make
new_in: 
sum[Ramp(0ll, 1ll, 3)]
old_in: 
tx[j + 8ll * i]
old_in: 
j + 8ll * i
old_in: 
j
new_in: 
j
old_in: 
8ll * i
old_in: 
8ll
new_in: 
8ll
old_in: 
i
stride value: 1
stride value cstr: 1
new_in: 
Ramp(0ll, 1ll, 3)
insert broadcasts for 0
broadcast make
lanes: 3
insert broadcasts for 1
no broadcast make
new_in: 
(Broadcast(8ll, 3)) * (Ramp(0ll, 1ll, 3))
insert broadcasts for 0
broadcast make
lanes: 3
insert broadcasts for 1
no broadcast make
new_in: 
(Broadcast(j, 3)) + (Broadcast(8ll, 3)) * (Ramp(0ll, 1ll, 3))
insert broadcasts for 0
no broadcast make
new_in: 
tx[(Broadcast(j, 3)) + (Broadcast(8ll, 3)) * (Ramp(0ll, 1ll, 3))]
insert broadcasts for 0
no broadcast make
insert broadcasts for 1
no broadcast make
new_in: 
(sum[Ramp(0ll, 1ll, 3)]) + (tx[(Broadcast(j, 3)) + (Broadcast(8ll, 3)) * (Ramp(0ll, 1ll, 3))])
insert broadcasts for 0
no broadcast make
insert broadcasts for 1
no broadcast make
stmt in Block after mutate: 
sum[Ramp(0ll, 1ll, 3)] = (sum[Ramp(0ll, 1ll, 3)]) + (tx[(Broadcast(j, 3)) + (Broadcast(8ll, 3)) * (Ramp(0ll, 1ll, 3))]);
body in For after mutate: 
{
  sum[Ramp(0ll, 1ll, 3)] = (sum[Ramp(0ll, 1ll, 3)]) + (tx[(Broadcast(j, 3)) + (Broadcast(8ll, 3)) * (Ramp(0ll, 1ll, 3))]);
}
stmt in Block after mutate: 
for (int64_t j = 0ll; j < 8ll; j++) {
  sum[Ramp(0ll, 1ll, 3)] = (sum[Ramp(0ll, 1ll, 3)]) + (tx[(Broadcast(j, 3)) + (Broadcast(8ll, 3)) * (Ramp(0ll, 1ll, 3))]);
}
after vec: 
{
  sum[Ramp(0ll, 1ll, 3)] = Broadcast(0.f, 3);
  for (int64_t j = 0ll; j < 8ll; j++) {
    sum[Ramp(0ll, 1ll, 3)] = (sum[Ramp(0ll, 1ll, 3)]) + (tx[(Broadcast(j, 3)) + (Broadcast(8ll, 3)) * (Ramp(0ll, 1ll, 3))]);
  }
}
stride value cstr: 1
lanes: 3
stride value cstr: 1
stride value cstr: 1
lanes: 3
lanes: 3
stride value cstr: 1
stride value cstr: 1
stride value cstr: 1
lanes: 3
lanes: 3
stride value cstr: 1
no value
hit
stride value cstr: 8
[DEBUG kernel.cpp:862] after vectorization{
[DEBUG kernel.cpp:862]   {
[DEBUG kernel.cpp:862]     sum[Ramp(0ll, 1ll, 3)] = Broadcast(0.f, 3);
[DEBUG kernel.cpp:862]     for (int64_t j = 0ll; j < 8ll; j++) {
[DEBUG kernel.cpp:862]       sum[Ramp(0ll, 1ll, 3)] = (sum[Ramp(0ll, 1ll, 3)]) + (tx[Ramp(j, 8ll, 3)]);
[DEBUG kernel.cpp:862]     }
[DEBUG kernel.cpp:862]   }
[DEBUG kernel.cpp:862] }
stride value cstr: 1
lanes: 3
stride value cstr: 1
stride value cstr: 1
hit
stride value cstr: 8
stride value cstr: 1
stride value cstr: 1
hit
stride value cstr: 8
stride value cstr: 1
lanes: 3
stride value cstr: 1
stride value cstr: 1
hit
stride value cstr: 8
[DEBUG kernel.cpp:871] Final Stmt:
[DEBUG kernel.cpp:871] {
[DEBUG kernel.cpp:871]   sum[Ramp(0ll, 1ll, 3)] = Broadcast(0.f, 3);
[DEBUG kernel.cpp:871]   for (int64_t j = 0ll; j < 8ll; j++) {
[DEBUG kernel.cpp:871]     sum[Ramp(0ll, 1ll, 3)] = (sum[Ramp(0ll, 1ll, 3)]) + (tx[Ramp(j, 8ll, 3)]);
[DEBUG kernel.cpp:871]   }
[DEBUG kernel.cpp:871] }
stride value cstr: 1
lanes: 3
stride value cstr: 1
stride value cstr: 1
hit
stride value cstr: 8
stride value cstr: 1
stride value cstr: 1
hit
stride value cstr: 8
stride value cstr: 1
lanes: 3
stride value cstr: 1
stride value cstr: 1
hit
stride value cstr: 8
stride value cstr: 1
stride value cstr: 1
hit
stride value cstr: 8
stride value cstr: 1
lanes: 3
stride value cstr: 1
stride value cstr: 1
hit
stride value cstr: 8
stride value cstr: 1
stride value cstr: 1
hit
stride value cstr: 8
tensor([-1.1318,  0.9659, -3.3952])
tensor([-1.1318,  0.9659, -3.3952])
.
----------------------------------------------------------------------
Ran 1 test in 0.154s

OK
